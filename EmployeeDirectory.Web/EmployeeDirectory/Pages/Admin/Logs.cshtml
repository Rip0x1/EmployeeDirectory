@page
@model EmployeeDirectory.Pages.Admin.LogsModel
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = "Administrator")]
@{
    ViewData["Title"] = "Логи системы";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-12">
            <div class="card shadow">
                <div class="card-header logs-header d-flex justify-content-between align-items-center">
                    <h4><i class="fas fa-clipboard-list me-2"></i>Логи системы</h4>
                    <button id="printLogsBtn" class="btn btn-light btn-sm">
                        <i class="fas fa-print me-1"></i>Печать
                    </button>
                </div>
                <div class="card-body">
                    <form method="get" class="row g-2 mb-3" id="logsFilterForm">
                        <div class="col-md-4">
                            <input type="text" name="q" value="@Model.Q" class="form-control" placeholder="Поиск по всем полям..." />
                        </div>
                        <div class="col-md-3">
                            <input type="date" name="from" value="@Model.FromDateString" class="form-control" placeholder="От даты" />
                        </div>
                        <div class="col-md-3">
                            <input type="date" name="to" value="@Model.ToDateString" class="form-control" placeholder="До даты" />
                        </div>
                        <div class="col-md-2">
                            <button id="logsResetBtn" class="btn btn-outline-secondary w-100" type="button">Сброс</button>
                        </div>
                    </form>
                    <div class="p-0">
                    <div class="table-responsive">
                        <table class="table mb-0">
                            <thead class="table-dark sticky-header">
                                <tr>
                                    <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important;">Дата/время (UTC)</th>
                                    <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important;">Пользователь</th>
                                    <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important;">Действие</th>
                                    <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important;">Сущность</th>
                                    <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important;">Детали</th>
                                </tr>
                            </thead>
                            <tbody id="logsTableBody">
                                @await Html.PartialAsync("/Pages/Admin/_LogsTable.cshtml", Model.Items)
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        #logsFilterForm .form-control {
            min-width: 0;
            flex: 1;
        }
        #logsFilterForm .col-md-1 {
            min-width: 80px;
        }
        #logsFilterForm .col-md-2 {
            min-width: 120px;
        }
        #logsFilterForm .col-md-3 {
            min-width: 150px;
        }
        #logsResetBtn {
            white-space: nowrap;
        }
    </style>
    <script>
        (function() {
            const form = document.getElementById('logsFilterForm');
            if (!form) return;
            let t;
            const debounce = (fn, d=300) => {
                clearTimeout(t);
                t = setTimeout(fn, d);
            };

            const updateTable = () => {
                const params = new URLSearchParams(new FormData(form));
                fetch(`@Url.Page("/Admin/Logs", "Table")?${params.toString()}`, { headers: { 'X-Requested-With': 'XMLHttpRequest' }})
                    .then(r => r.text())
                    .then(html => {
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(html, 'text/html');
                        const tbody = doc.querySelector('tbody');
                        if (tbody) {
                            document.getElementById('logsTableBody').innerHTML = tbody.innerHTML;
                        }
                    });
            };

            form.addEventListener('input', (e) => {
                debounce(updateTable);
            });
            form.addEventListener('change', (e) => {
                debounce(updateTable);
            });

            const resetBtn = document.getElementById('logsResetBtn');
            if (resetBtn) {
                resetBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    form.querySelector('input[name="q"]').value = '';
                    form.querySelector('input[name="from"]').value = '';
                    form.querySelector('input[name="to"]').value = '';
                    updateTable();
                });
            }

            const printBtn = document.getElementById('printLogsBtn');
            if (printBtn) {
                printBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    const params = new URLSearchParams(new FormData(form));
                    const printUrl = `@Url.Page("/Print/PrintLogs")?${params.toString()}`;
                    window.open(printUrl, '_blank');
                });
            }
        })();
    </script>
}


