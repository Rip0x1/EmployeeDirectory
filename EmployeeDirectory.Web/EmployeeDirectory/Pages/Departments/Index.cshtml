@page
@model IndexModel
@{
    ViewData["Title"] = "Мой отдел";
}

<div class="container-fluid fade-in-up">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="fas fa-building me-2"></i>Мой отдел</h2>
                <div class="d-flex justify-content-end">
                    <a asp-page="/Employees/Create" asp-route-returnUrl="/Departments" class="btn btn-success">
                        <i class="fas fa-plus me-1"></i>Добавить сотрудника
                    </a>
                </div>
            </div>

            <div class="card mb-4 shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h6 class="mb-0"><i class="fas fa-search me-2"></i>Поиск и фильтрация</h6>
                </div>
                <div class="card-body">
                    <div class="row g-3 mb-3">
                        <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                            <label for="search" class="form-label">
                                <i class="fas fa-search me-1"></i>Поиск по ФИО
                            </label>
                            <input type="text" class="form-control" id="search" name="search" 
                                   placeholder="Введите ФИО...">
                        </div>
                        <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                            <label for="phoneSearch" class="form-label">
                                <i class="fas fa-phone me-1"></i>Поиск по телефону
                            </label>
                            <input type="text" class="form-control" id="phoneSearch" name="phoneSearch" 
                                   placeholder="Городской или местный номер...">
                        </div>
                        <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                            <label for="positionSearch" class="form-label">
                                <i class="fas fa-user-tie me-1"></i>Поиск по должности
                            </label>
                            <input type="text" class="form-control" id="positionSearch" name="positionSearch" 
                                   placeholder="Введите должность...">
                        </div>
                        <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                            <label for="emailSearch" class="form-label">
                                <i class="fas fa-envelope me-1"></i>Поиск по Email
                            </label>
                            <input type="text" class="form-control" id="emailSearch" name="emailSearch" 
                                   placeholder="Введите email...">
                        </div>
                    </div>
                    
                    <div class="row g-3 mb-3">
                        <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                            <label for="employees" class="form-label">
                                <i class="fas fa-users me-1"></i>ФИО
                            </label>
                            <select class="form-select" id="employees" name="employees" multiple size="3">
                                @if (Model.Employees.Where(e => !string.IsNullOrEmpty(e.FullName)).Any())
                                {
                                    @foreach (var employee in Model.Employees.Where(e => !string.IsNullOrEmpty(e.FullName)).Select(e => e.FullName).Distinct().OrderBy(e => e))
                                    {
                                        <option value="@employee">@employee</option>
                                    }
                                }
                                else
                                {
                                    <option disabled>Нет доступных сотрудников</option>
                                }
                            </select>
                            <small class="text-muted">Удерживайте Ctrl для выбора нескольких</small>
                        </div>
                        <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                            <label for="positions" class="form-label">
                                <i class="fas fa-user-tie me-1"></i>Должности
                            </label>
                            <select class="form-select" id="positions" name="positions" multiple size="3">
                                @if (Model.Employees.Select(e => e.PositionDescription).Where(p => !string.IsNullOrEmpty(p)).Any())
                                {
                                    @foreach (var position in Model.Employees.Select(e => e.PositionDescription).Where(p => !string.IsNullOrEmpty(p)).Distinct().OrderBy(p => p))
                                    {
                                        <option value="@position">@position</option>
                                    }
                                }
                                else
                                {
                                    <option disabled>Нет доступных должностей</option>
                                }
                            </select>
                            <small class="text-muted">Удерживайте Ctrl для выбора нескольких</small>
                        </div>
                    </div>
                </div>
            </div>

            @if (Model.Employees.Any())
            {
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center gap-2">
                        <h5 class="mb-0">Список сотрудников (@Model.Employees.Count())</h5>
                        <div class="d-flex flex-wrap align-items-center gap-2">
                            <button id="printDepartmentBtn" class="btn btn-outline-primary">
                                <i class="fas fa-print me-1"></i>Печать
                            </button>
                            <button type="button" id="resetFiltersBtn" class="btn btn-outline-danger">
                                <i class="fas fa-times me-1"></i>Сброс фильтров
                            </button>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div id="employeesTable">
                            <div class="department-section">
                                <div class="department-header">
                                    <span class="department-name-badge">@Model.DepartmentName</span>
                                </div>

                                <table class="employees-table">
                                    <thead>
                                        <tr>
                                            <th style="width: 30%;">Должность / ФИО</th>
                                            <th style="width: 15%;">Городской номер</th>
                                            <th style="width: 15%;">Местный номер</th>
                                            <th style="width: 20%;">Email</th>
                                            <th style="width: 20%;">Действия</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                    @foreach (var employee in Model.Employees)
                                    {
                                        <tr>
                                            <td class="employee-name">
                                                @if (!string.IsNullOrEmpty(employee.PositionDescription))
                                                {
                                                    <span class="position-badge @(employee.IsHeadOfDepartment ? "position-head" : "position-employee")">
                                                        @employee.PositionDescription
                                                    </span>
                                                    @if (!string.IsNullOrEmpty(employee.FullName))
                                                    {
                                                        <strong>@employee.FullName</strong>
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="text-muted fst-italic">-</span>
                                                }
                                            </td>
                                            <td class="phone-number">@(employee.CityPhone ?? "Не указано")</td>
                                            <td class="phone-number">@(employee.LocalPhone ?? "Не указано")</td>
                                            <td class="phone-number">@(employee.Email ?? "Не указано")</td>
                                            <td class="text-center">
                                                <div class="btn-group" role="group">
                                                    <a asp-page="/Employees/Edit" asp-route-id="@employee.Id" asp-route-returnUrl="/Departments" class="btn btn-sm btn-outline-warning" title="Редактировать">
                                                        <i class="fas fa-edit"></i>
                                                    </a>
                                                    <a asp-page="/Employees/Delete" asp-route-id="@employee.Id" asp-route-returnUrl="/Departments" class="btn btn-sm btn-outline-danger" title="Удалить">
                                                        <i class="fas fa-trash"></i>
                                                    </a>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-body text-center py-5">
                        <i class="fas fa-users fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">В отделе пока нет сотрудников</h5>
                        <p class="text-muted">Добавьте первого сотрудника в ваш отдел</p>
                        <a asp-page="/Employees/Create" asp-route-returnUrl="/Departments" class="btn btn-success">
                            <i class="fas fa-plus me-1"></i>Добавить сотрудника
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


<script>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('search');
    const positionSearchInput = document.getElementById('positionSearch');
    const phoneSearchInput = document.getElementById('phoneSearch');
    const emailSearchInput = document.getElementById('emailSearch');
    const employeesSelect = document.getElementById('employees');
    const positionsSelect = document.getElementById('positions');
    const tbody = document.querySelector('tbody');
    
    function performSearch() {
        const searchTerm = searchInput.value.toLowerCase();
        const positionSearch = positionSearchInput.value.toLowerCase();
        const phoneSearch = phoneSearchInput.value.toLowerCase();
        const emailSearch = emailSearchInput.value.toLowerCase();
        const selectedEmployees = Array.from(employeesSelect.selectedOptions).map(option => option.value);
        const selectedPositions = Array.from(positionsSelect.selectedOptions).map(option => option.value);

        const rows = Array.from(tbody.querySelectorAll('tr'));
        
        rows.forEach(row => {
            if (row.classList.contains('text-center')) return; 
            
            const cells = row.querySelectorAll('td');
            if (cells.length === 0) return;
            
            const fullName = cells[0].textContent.toLowerCase();
            const cityPhone = cells[1].textContent.toLowerCase();
            const localPhone = cells[2].textContent.toLowerCase();
            const email = cells[3].textContent.toLowerCase();
            const positionText = cells[0].querySelector('.position-badge')?.textContent.toLowerCase() || '';
            
            let showRow = true;

            if (searchTerm && !fullName.includes(searchTerm) && !positionText.includes(searchTerm)) {
                showRow = false;
            }

            if (positionSearch && !positionText.includes(positionSearch)) {
                showRow = false;
            }

            if (phoneSearch && !cityPhone.includes(phoneSearch) && !localPhone.includes(phoneSearch)) {
                showRow = false;
            }

            if (emailSearch && !email.includes(emailSearch)) {
                showRow = false;
            }

            if (selectedEmployees.length > 0) {
                const employeeName = cells[0].querySelector('strong')?.textContent || '';
                const isEmployeeSelected = selectedEmployees.some(selected => 
                    employeeName.toLowerCase().includes(selected.toLowerCase()) || 
                    selected.toLowerCase().includes(employeeName.toLowerCase())
                );
                if (!isEmployeeSelected) {
                    showRow = false;
                }
            }

            if (selectedPositions.length > 0) {
                const isPositionSelected = selectedPositions.some(selected => 
                    positionText.includes(selected.toLowerCase()) || 
                    selected.toLowerCase().includes(positionText)
                );
                if (!isPositionSelected) {
                    showRow = false;
                }
            }

            row.style.display = showRow ? '' : 'none';
        });
        
        updateEmployeeCount();
    }
    
    function updateEmployeeCount() {
        const visibleRows = Array.from(tbody.querySelectorAll('tr')).filter(row => 
            !row.classList.contains('text-center') && 
            row.style.display !== 'none'
        );
        const count = visibleRows.length;
        const countElement = document.querySelector('.card-header h5');
        if (countElement) {
            countElement.textContent = `Список сотрудников (${count})`;
        }
    }

    function resetFilters() {
        searchInput.value = '';
        positionSearchInput.value = '';
        phoneSearchInput.value = '';
        emailSearchInput.value = '';
        
        Array.from(employeesSelect.options).forEach(option => option.selected = false);
        Array.from(positionsSelect.options).forEach(option => option.selected = false);
        
        const rows = Array.from(tbody.querySelectorAll('tr'));
        rows.forEach(row => {
            if (!row.classList.contains('text-center')) {
                row.style.display = '';
            }
        });
        
        updateEmployeeCount();
    }

    searchInput.addEventListener('input', function() {
        clearTimeout(this.searchTimeout);
        this.searchTimeout = setTimeout(performSearch, 300);
    });
    
    positionSearchInput.addEventListener('input', function() {
        clearTimeout(this.searchTimeout);
        this.searchTimeout = setTimeout(performSearch, 300);
    });
    
    phoneSearchInput.addEventListener('input', function() {
        clearTimeout(this.searchTimeout);
        this.searchTimeout = setTimeout(performSearch, 300);
    });
    
    emailSearchInput.addEventListener('input', function() {
        clearTimeout(this.searchTimeout);
        this.searchTimeout = setTimeout(performSearch, 300);
    });
    
    employeesSelect.addEventListener('change', function() {
        updatePositionsList();
        performSearch();
    });
    
    positionsSelect.addEventListener('change', performSearch);

    const resetFiltersBtn = document.getElementById('resetFiltersBtn');
    if (resetFiltersBtn) {
        resetFiltersBtn.addEventListener('click', resetFilters);
    }
    
    updateEmployeeCount();
    
    function updatePositionsList() {
        const selectedEmployees = Array.from(employeesSelect.selectedOptions).map(option => option.value);
        
        if (selectedEmployees.length === 0) {
            Array.from(positionsSelect.options).forEach(option => {
                option.style.display = '';
            });
        } else {
            const availablePositions = [];
            selectedEmployees.forEach(employeeName => {
                const employeeRow = Array.from(document.querySelectorAll('tbody tr')).find(row => {
                    const nameCell = row.querySelector('.employee-name');
                    return nameCell && nameCell.textContent.includes(employeeName);
                });
                
                if (employeeRow) {
                    const positionBadge = employeeRow.querySelector('.position-badge');
                    if (positionBadge) {
                        const position = positionBadge.textContent.trim();
                        if (position && !availablePositions.includes(position)) {
                            availablePositions.push(position);
                        }
                    }
                }
            });
            
            Array.from(positionsSelect.options).forEach(option => {
                if (option.value === '') {
                    option.style.display = ''; 
                } else {
                    option.style.display = availablePositions.includes(option.value) ? '' : 'none';
                }
            });
        }
    }

    employeesSelect.addEventListener('change', function() {
        updatePositionsList();
        performSearch();
    });
    positionsSelect.addEventListener('change', performSearch);
});
</script>

<style>
.department-name-badge {
    display: inline-block;
    background: linear-gradient(135deg, #6f42c1, #9c27b0);
    color: white;
    padding: 6px 12px;
    border-radius: 15px;
    font-weight: bold;
    font-size: 0.9em;
    border: 2px solid #6f42c1;
    box-shadow: 0 2px 6px rgba(111, 66, 193, 0.2);
    text-align: center;
    margin: 0 auto;
    width: fit-content;
    min-width: 80px;
}

.department-header {
    background: none !important;
    text-align: center;
    padding: 10px 0;
}

.department-section {
    margin-bottom: 20px;
}

.employees-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
}

.employees-table th {
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    padding: 8px;
    text-align: center;
    vertical-align: middle;
    font-weight: bold;
}

.employees-table td {
    border: 1px solid #dee2e6;
    padding: 8px;
    text-align: center;
    vertical-align: middle;
}

.employee-name {
    font-weight: 500;
}

.phone-number {
    text-align: center;
}

.position-badge {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.8em;
    font-weight: bold;
    margin-right: 8px;
}

.position-head {
    background: linear-gradient(45deg, #ffc107, #e0a800);
    color: #000;
}

.position-employee {
    background: linear-gradient(45deg, #007bff, #0056b3);
    color: white;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const printDepartmentBtn = document.getElementById('printDepartmentBtn');
    console.log('Print department button found:', printDepartmentBtn);
    if (printDepartmentBtn) {
        printDepartmentBtn.addEventListener('click', function() {
            const search = document.getElementById('search')?.value || '';
            const phoneSearch = document.getElementById('phoneSearch')?.value || '';
            const employees = Array.from(document.getElementById('employees')?.selectedOptions || [])
                .map(option => option.value);
            const positions = Array.from(document.getElementById('positions')?.selectedOptions || [])
                .map(option => option.value);
            const positionSearch = document.getElementById('positionSearch')?.value || '';
            const emailSearch = document.getElementById('emailSearch')?.value || '';
            
            const params = new URLSearchParams();
            params.append('departmentId', @Model.DepartmentId);
            if (search) params.append('search', search);
            if (phoneSearch) params.append('phoneSearch', phoneSearch);
            if (positionSearch) params.append('positionSearch', positionSearch);
            if (emailSearch) params.append('emailSearch', emailSearch);
            if (employees.length > 0) params.append('employeeNames', employees.join(','));
            if (positions.length > 0) params.append('positionNames', positions.join(','));
            
            const url = '@Url.Page("/Print/PrintDepartments")' + '?' + params.toString();
            window.open(url, '_blank');
        });
    } else {
        console.log('Print department button not found!');
    }
});
</script>