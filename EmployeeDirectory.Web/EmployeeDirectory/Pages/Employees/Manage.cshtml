@page
@model ManageModel
@{
    ViewData["Title"] = "Управление сотрудниками";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="fas fa-users me-2"></i>Управление сотрудниками</h2>
                <a asp-page="/Employees/Create" asp-route-returnUrl="/Employees/Manage" class="btn btn-success">
                    <i class="fas fa-user-plus me-1"></i>Добавить сотрудника
                </a>
            </div>
        </div>
    </div>

    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-primary text-white">
            <h6 class="mb-0"><i class="fas fa-search me-2"></i>Поиск и фильтрация</h6>
        </div>
        <div class="card-body">
            <div class="row g-3 mb-3">
                <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                    <label for="search" class="form-label">
                        <i class="fas fa-search me-1"></i>Поиск по ФИО
                    </label>
                    <input type="text" class="form-control" id="search" placeholder="Введите ФИО для поиска">
                </div>
                <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                    <label for="phoneSearch" class="form-label">
                        <i class="fas fa-phone me-1"></i>Поиск по телефону
                    </label>
                    <input type="text" class="form-control" id="phoneSearch" placeholder="Городской или местный номер...">
                </div>
                <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                    <label for="isHeadOnly" class="form-label">
                        <i class="fas fa-crown me-1"></i>Только начальники
                    </label>
                    <select class="form-select" id="isHeadOnly">
                        <option value="">Все сотрудники</option>
                        <option value="true">Только начальники</option>
                        <option value="false">Только рядовые</option>
                    </select>
                </div>
                <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                    <label for="sortBy" class="form-label">
                        <i class="fas fa-sort me-1"></i>Сортировка
                    </label>
                    <select class="form-select" id="sortBy">
                        <option value="">По умолчанию</option>
                        <option value="name">По ФИО</option>
                        <option value="department">По отделу</option>
                        <option value="position">По должности</option>
                    </select>
                </div>
            </div>
            
            <div class="row g-3 mb-3">
                <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                    <label for="employees" class="form-label">
                        <i class="fas fa-users me-1"></i>ФИО (множественный выбор)
                    </label>
                    <select class="form-select" id="employees" multiple size="3">
                        @foreach (var employee in Model.Employees.Where(e => !string.IsNullOrEmpty(e.FullName)).Select(e => e.FullName).Distinct().OrderBy(e => e))
                        {
                            <option value="@employee">@employee</option>
                        }
                    </select>
                    <small class="text-muted">Удерживайте Ctrl для выбора нескольких</small>
                </div>
                <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                    <label for="departments" class="form-label">
                        <i class="fas fa-building me-1"></i>Отделы (множественный выбор)
                    </label>
                    <select class="form-select" id="departments" multiple size="3">
                        @foreach (var department in Model.Departments)
                        {
                            <option value="@department.Id">@department.Name</option>
                        }
                    </select>
                    <small class="text-muted">Удерживайте Ctrl для выбора нескольких</small>
                </div>
                <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                    <label for="positions" class="form-label">
                        <i class="fas fa-user-tie me-1"></i>Должности (множественный выбор)
                    </label>
                    <select class="form-select" id="positions" multiple size="3">
                        @foreach (var position in Model.Employees.Select(e => e.PositionDescription).Where(p => !string.IsNullOrEmpty(p)).Distinct().OrderBy(p => p))
                        {
                            <option value="@position">@position</option>
                        }
                    </select>
                    <small class="text-muted">Удерживайте Ctrl для выбора нескольких</small>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mb-3">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <label class="form-label me-3 mb-0">
                        <i class="fas fa-list me-1"></i>Настройки отображения
                    </label>
                </div>
                <div>
                    <a href="/Employees/Manage" class="btn btn-outline-danger">
                        <i class="fas fa-times me-1"></i>Сброс фильтров
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Список сотрудников (@Model.Employees.Count())</h5>
            <a href="@Url.Page("/Print/AllEmployees")" target="_blank" class="btn btn-outline-primary btn-sm">
                <i class="fas fa-print me-1"></i>Печать всех
            </a>
        </div>
        <div class="card-body p-0">
            <div id="employeesTable">
                            @{
                                var groupedEmployees = Model.Employees.GroupBy(e => e.Department.Name).OrderBy(g => g.Key);
                            }
                            @foreach (var departmentGroup in groupedEmployees)
                            {
                                <div class="department-section">
                                    <div class="department-header">
                                        <span class="department-name-badge">@departmentGroup.Key</span>
                                    </div>

                                    <table class="employees-table">
                                        <thead>
                                            <tr>
                                                <th style="width: 40%;">Должность / ФИО</th>
                                                <th style="width: 20%;">Городской номер</th>
                                                <th style="width: 20%;">Местный номер</th>
                                                <th style="width: 20%;">Действия</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var employee in departmentGroup)
                                            {
                                                <tr>
                                                    <td class="employee-name">
                                                        @if (!string.IsNullOrEmpty(employee.PositionDescription))
                                                        {
                                                            <span class="position-badge @(employee.IsHeadOfDepartment ? "position-head" : "position-employee")">
                                                                @employee.PositionDescription
                                                            </span>
                                                            @if (!string.IsNullOrEmpty(employee.FullName))
                                                            {
                                                                <strong>@employee.FullName</strong>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted fst-italic">-</span>
                                                        }
                                                    </td>
                                                    <td class="phone-number">@(employee.CityPhone ?? "Не указано")</td>
                                                    <td class="phone-number">@(employee.LocalPhone ?? "Не указано")</td>
                                                    <td class="text-center">
                                                        <div class="btn-group" role="group">
                                                            <a asp-page="/Employees/Edit" asp-route-id="@employee.Id" asp-route-returnUrl="/Employees/Manage" class="btn btn-sm btn-outline-warning" title="Редактировать">
                                                                <i class="fas fa-edit"></i>
                                                            </a>
                                                            <a asp-page="/Employees/Delete" asp-route-id="@employee.Id" asp-route-returnUrl="/Employees/Manage" class="btn btn-sm btn-outline-danger" title="Удалить">
                                                                <i class="fas fa-trash"></i>
                                                            </a>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            @if (!Model.Employees.Any())
                            {
                                <div class="text-center text-muted py-4">Сотрудники не найдены</div>
                            }
            </div>
        </div>
    </div>
</div>


<script>
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('search');
        const phoneSearchInput = document.getElementById('phoneSearch');
        const isHeadOnlySelect = document.getElementById('isHeadOnly');
        const sortBySelect = document.getElementById('sortBy');
        const employeesSelect = document.getElementById('employees');
        const departmentsSelect = document.getElementById('departments');
        const positionsSelect = document.getElementById('positions');
        const tbody = document.getElementById('employeesTable');

        function performSearch() {
            const searchTerm = searchInput.value;
            const phoneSearch = phoneSearchInput.value;
            const isHeadOnly = isHeadOnlySelect.value;
            const sortBy = sortBySelect.value;
            const selectedEmployees = Array.from(employeesSelect.selectedOptions).map(option => option.value);
            const selectedDepartments = Array.from(departmentsSelect.selectedOptions).map(option => option.value);
            const selectedPositions = Array.from(positionsSelect.selectedOptions).map(option => option.value);

            tbody.innerHTML = '<tr><td colspan="4" class="text-center"><div class="spinner-border" role="status"><span class="visually-hidden">Загрузка...</span></div></td></tr>';

            const params = new URLSearchParams();
            if (searchTerm) params.append('search', searchTerm);
            if (phoneSearch) params.append('phoneSearch', phoneSearch);
            if (isHeadOnly) params.append('isHeadOnly', isHeadOnly);
            if (sortBy) params.append('sortBy', sortBy);
            selectedEmployees.forEach(emp => params.append('selectedEmployees', emp));
            selectedDepartments.forEach(id => params.append('departments', id));
            selectedPositions.forEach(pos => params.append('positions', pos));

            fetch(`/api/search?${params.toString()}`)
                .then(response => response.json())
                .then(data => {
                    if (data.employees && data.employees.length > 0) {
                        const grouped = data.employees.reduce((groups, emp) => {
                            const dept = emp.departmentName;
                            if (!groups[dept]) groups[dept] = [];
                            groups[dept].push(emp);
                            return groups;
                        }, {});

                        let html = '';
                        Object.keys(grouped).sort().forEach(deptName => {
                            html += `
                                <div class="department-section">
                                    <div class="department-header">
                                        <span class="department-name-badge">${deptName}</span>
                                    </div>

                                    <table class="employees-table">
                                        <thead>
                                            <tr>
                                                <th style="width: 40%;">Должность / ФИО</th>
                                                <th style="width: 20%;">Городской номер</th>
                                                <th style="width: 20%;">Местный номер</th>
                                                <th style="width: 20%;">Действия</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                            `;
                            grouped[deptName].forEach(emp => {
                                let positionBadge = '';
                                if (emp.positionDescription) {
                                    const isHead = emp.isHeadOfDepartment;
                                    const badgeClass = isHead ? 'position-head' : 'position-employee';
                                    
                                    positionBadge = `<span class="position-badge ${badgeClass}">${emp.positionDescription}</span>`;
                                    if (emp.fullName && emp.fullName !== '-') {
                                        positionBadge += `<strong>${emp.fullName}</strong>`;
                                    }
                                } else {
                                    positionBadge = '<span class="text-muted fst-italic">-</span>';
                                }

                                html += `
                                            <tr>
                                                <td class="employee-name">
                                                    ${positionBadge}
                                                </td>
                                                <td class="phone-number">${emp.cityPhone || 'Не указано'}</td>
                                                <td class="phone-number">${emp.localPhone || 'Не указано'}</td>
                                                <td class="text-center">
                                                    <div class="btn-group" role="group">
                                                        <a href="/Employees/Edit?id=${emp.id}&returnUrl=/Employees/Manage" class="btn btn-sm btn-outline-warning" title="Редактировать">
                                                            <i class="fas fa-edit"></i>
                                                        </a>
                                                        <a href="/Employees/Delete?id=${emp.id}&returnUrl=/Employees/Manage" class="btn btn-sm btn-outline-danger" title="Удалить">
                                                            <i class="fas fa-trash"></i>
                                                        </a>
                                                    </div>
                                                </td>
                                            </tr>
                                `;
                            });
                            
                            html += `
                                        </tbody>
                                    </table>
                                </div>
                            `;
                        });
                        tbody.innerHTML = html;
                    } else {
                        tbody.innerHTML = '<tr><td colspan="4" class="text-center text-muted">Сотрудники не найдены</td></tr>';
                    }
                })
                .catch(error => {
                    console.error('Ошибка поиска:', error);
                    tbody.innerHTML = '<tr><td colspan="4" class="text-center text-danger">Ошибка при выполнении поиска</td></tr>';
                });
        }

        searchInput.addEventListener('input', function() {
            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(performSearch, 300);
        });

        phoneSearchInput.addEventListener('input', function() {
            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(performSearch, 300);
        });

        function updatePositionsList() {
            const selectedDepartments = Array.from(departmentsSelect.selectedOptions).map(option => option.value);
            
            if (selectedDepartments.length === 0) {
                Array.from(positionsSelect.options).forEach(option => {
                    option.style.display = '';
                });
            } else {
                const params = new URLSearchParams();
                selectedDepartments.forEach(id => params.append('departments', id));
                
                fetch(`/api/search?${params.toString()}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.employees && data.employees.length > 0) {
                            const availablePositions = [...new Set(data.employees
                                .map(emp => emp.positionDescription)
                                .filter(pos => pos && pos.trim() !== '')
                            )].sort();
                            
                            Array.from(positionsSelect.options).forEach(option => {
                                if (option.value === '') {
                                    option.style.display = ''; 
                                } else {
                                    option.style.display = availablePositions.includes(option.value) ? '' : 'none';
                                }
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Ошибка при обновлении списка должностей:', error);
                    });
            }
        }

        function updateEmployeesList() {
            const selectedDepartments = Array.from(departmentsSelect.selectedOptions).map(option => option.value);
            
            if (selectedDepartments.length === 0) {
                Array.from(employeesSelect.options).forEach(option => {
                    option.style.display = '';
                });
            } else {
                const params = new URLSearchParams();
                selectedDepartments.forEach(id => params.append('departments', id));
                
                fetch(`/api/search?${params.toString()}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.employees && data.employees.length > 0) {
                            const availableEmployees = [...new Set(data.employees
                                .map(emp => emp.fullName)
                                .filter(name => name && name.trim() !== '')
                            )].sort();
                            
                            Array.from(employeesSelect.options).forEach(option => {
                                if (option.value === '') {
                                    option.style.display = ''; 
                                } else {
                                    option.style.display = availableEmployees.includes(option.value) ? '' : 'none';
                                }
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Ошибка при обновлении списка сотрудников:', error);
                    });
            }
        }

        employeesSelect.addEventListener('change', performSearch);
        departmentsSelect.addEventListener('change', function() {
            updatePositionsList();
            updateEmployeesList();
            performSearch();
        });
        positionsSelect.addEventListener('change', performSearch);
        isHeadOnlySelect.addEventListener('change', performSearch);
        sortBySelect.addEventListener('change', performSearch);
    });
</script>

<style>
.department-name-badge {
    display: inline-block;
    background: linear-gradient(135deg, #6f42c1, #9c27b0);
    color: white;
    padding: 6px 12px;
    border-radius: 15px;
    font-weight: bold;
    font-size: 0.9em;
    border: 2px solid #6f42c1;
    box-shadow: 0 2px 6px rgba(111, 66, 193, 0.2);
    text-align: center;
    margin: 0 auto;
    width: fit-content;
    min-width: 80px;
}

.department-header {
    background: none !important;
    text-align: center;
    padding: 10px 0;
}

.department-section {
    margin-bottom: 20px;
}

.employees-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
}

.employees-table th {
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    padding: 8px;
    text-align: center;
    font-weight: bold;
}

.employees-table td {
    border: 1px solid #dee2e6;
    padding: 8px;
    vertical-align: top;
}

.employee-name {
    font-weight: 500;
}

.phone-number {
    text-align: center;
}

.position-badge {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.8em;
    font-weight: bold;
    margin-right: 8px;
}

.position-head {
    background: linear-gradient(45deg, #ffc107, #e0a800);
    color: #000;
}

.position-employee {
    background: linear-gradient(45deg, #007bff, #0056b3);
    color: white;
}
</style>
