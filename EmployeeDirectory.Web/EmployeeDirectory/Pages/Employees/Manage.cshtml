@page
@model ManageModel
@{
    ViewData["Title"] = "Управление сотрудниками";
}

<div class="container-fluid fade-in-up">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="fas fa-users me-2"></i>Управление сотрудниками</h2>
                <div class="d-flex gap-2">
                    <a class="btn btn-success" href="/Employees/Create?returnUrl=%2FEmployees%2FManage">
                        <i class="fas fa-plus me-1"></i>Добавить сотрудника
                    </a>
                    <a asp-page="/Admin/Index" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left me-2"></i>Назад к списку
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="search-filters-container">
        <div class="search-filters-header" style="display: flex; justify-content: space-between; align-items: center;">
            <h6 style="margin: 0;"><i class="fas fa-search"></i>Поиск и фильтрация</h6>
            <div class="expand-search-toggle">
                <label for="expandSearch" class="expand-search-label">
                    <i class="fas fa-chevron-down expand-icon"></i>
                    <span>Расширенный</span>
                </label>
                <input type="checkbox" id="expandSearch" style="display: none;">
            </div>
        </div>
        
        <div class="row g-3 mb-3 justify-content-center">
            <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                <div class="search-input-group">
                    <label for="search" class="form-label">
                        <i class="fas fa-search"></i>Поиск по ФИО
                    </label>
                    <input type="text" class="form-control" id="search" placeholder="Введите ФИО для поиска">
                </div>
            </div>
            <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                <div class="search-input-group">
                    <label for="phoneSearch" class="form-label">
                        <i class="fas fa-phone"></i>Поиск по телефону
                    </label>
                    <input type="text" class="form-control" id="phoneSearch" placeholder="Городской или внутренний номер...">
                </div>
            </div>
            <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                <div class="search-input-group">
                    <label for="departmentSearch" class="form-label">
                        <i class="fas fa-building"></i>Поиск по отделу
                    </label>
                    <input type="text" class="form-control" id="departmentSearch" placeholder="Введите название отдела" />
                </div>
            </div>
        </div>
        
        <div id="advancedSearch" style="display: none; border-top: 2px solid rgba(86, 171, 47, 0.2); padding-top: 20px; margin-top: 10px;">
            <div class="row g-3 mb-3 justify-content-center">
                <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                    <div class="search-input-group">
                        <label for="positionSearch" class="form-label">
                            <i class="fas fa-user-tie"></i>Поиск по должности
                        </label>
                        <input type="text" class="form-control" id="positionSearch" placeholder="Введите должность...">
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                    <div class="search-input-group">
                        <label for="emailSearch" class="form-label">
                            <i class="fas fa-envelope"></i>Поиск по Email
                        </label>
                        <input type="text" class="form-control" id="emailSearch" placeholder="Введите email...">
                    </div>
                </div>
            </div>
            
            <div class="row g-3 mb-3 justify-content-center">
                <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                    <div class="search-input-group">
                        <label for="departmentFullNameSearch" class="form-label">
                            <i class="fas fa-building"></i>Поиск по полному названию отдела
                        </label>
                        <input type="text" class="form-control" id="departmentFullNameSearch" name="departmentFullNameSearch" 
                               placeholder="Введите полное название...">
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                    <div class="search-input-group">
                        <label for="departmentShortNameSearch" class="form-label">
                            <i class="fas fa-building"></i>Поиск по сокращенному названию отдела
                        </label>
                        <input type="text" class="form-control" id="departmentShortNameSearch" name="departmentShortNameSearch" 
                               placeholder="Введите сокращенное название...">
                    </div>
                </div>
            </div>
            
            <div class="row g-3 mb-3 justify-content-center">
                <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                    <div class="search-select-group">
                        <label for="employees" class="form-label">
                            <i class="fas fa-users"></i>ФИО
                        </label>
                        <select class="form-select" id="employees" multiple size="3">
                            @if (Model.Employees.Where(e => !string.IsNullOrEmpty(e.FullName)).Any())
                            {
                                @foreach (var employee in Model.Employees.Where(e => !string.IsNullOrEmpty(e.FullName)).Select(e => e.FullName).Distinct().OrderBy(e => e))
                                {
                                    <option value="@employee">@employee</option>
                                }
                            }
                            else
                            {
                                <option disabled>Нет доступных сотрудников</option>
                            }
                        </select>
                        <div class="search-help-text">Удерживайте Ctrl для выбора нескольких</div>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                    <div class="search-select-group">
                        <label for="departments" class="form-label">
                            <i class="fas fa-building"></i>Отделы
                        </label>
                        <select class="form-select" id="departments" multiple size="3">
                            @if (Model.Departments.Any())
                            {
                                @foreach (var department in Model.Departments)
                                {
                                    <option value="@department.Id" data-fullname="@(department.FullName ?? "")" data-shortname="@(department.ShortName ?? "")">@department.GetDisplayName()</option>
                                }
                            }
                            else
                            {
                                <option disabled>Нет доступных отделов</option>
                            }
                        </select>
                        <div class="search-help-text">Удерживайте Ctrl для выбора нескольких</div>
                    </div>
                </div>
                <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                    <div class="search-select-group">
                        <label for="positions" class="form-label">
                            <i class="fas fa-user-tie"></i>Должности
                        </label>
                        <select class="form-select" id="positions" multiple size="3">
                        @if (Model.Employees.Select(e => e.PositionDescription).Where(p => !string.IsNullOrEmpty(p)).Any())
                        {
                            @foreach (var position in Model.Employees.Select(e => e.PositionDescription).Where(p => !string.IsNullOrEmpty(p)).Distinct().OrderBy(p => p))
                            {
                                <option value="@position">@position</option>
                            }
                        }
                        else
                        {
                            <option disabled>Нет доступных должностей</option>
                        }
                    </select>
                    <div class="search-help-text">Удерживайте Ctrl для выбора нескольких</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="search-actions">
            <button type="button" id="resetFiltersBtn" class="btn btn-outline-danger w-100">
                <i class="fas fa-times"></i>Сброс фильтров
            </button>
        </div>
    </div>
    

    <div class="search-results-header">
            <div class="d-flex flex-wrap justify-content-between align-items-center gap-2">
            <h5><i class="fas fa-users"></i>Список сотрудников <span class="badge">@Model.Employees.Count()</span></h5>
                <div class="d-flex flex-wrap align-items-center gap-2">
                <button type="button" id="printBtn" class="btn" style="background: rgba(255,255,255,0.2); border: 1px solid rgba(255,255,255,0.3); color: white;" data-bs-toggle="modal" data-bs-target="#printSettingsModal" data-print-url="/Pdf/ManageEmployees">
                    <i class="fas fa-print"></i> Печать
                    </button>
                <button type="button" id="exportBtn" class="btn" style="background: rgba(255,255,255,0.2); border: 1px solid rgba(255,255,255,0.3); color: white;" data-bs-toggle="modal" data-bs-target="#exportSettingsModal">
                    <i class="fas fa-download"></i> Экспорт
                </button>
                </div>
            </div>
        </div>
    
    <div class="card">
        <div class="card-body p-0">
        <div class="card-body p-0">
            <div id="employeesTable">
                            @{
                                var groupedEmployees = Model.Employees.GroupBy(e => e.Department?.GetDisplayName() ?? e.Department?.Name ?? "Неизвестный отдел").OrderBy(g => g.Key);
                            }
                            @foreach (var departmentGroup in groupedEmployees)
                            {
                                <div class="department-section">
                                    <div class="department-header">
                                        <span class="department-name-badge">@departmentGroup.Key</span>
                                    </div>

                                    <table id="employeesTable" class="table mb-0">
                                        <thead class="table-dark sticky-header">
                                            <tr>
                                                <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 30%;">Должность / ФИО</th>
                                                <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 15%;">Городской номер</th>
                                                <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 15%;">Внутренний номер</th>
                                                <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 20%;">Email</th>
                                                <th class="text-center" style="border-bottom: 2px solid rgb(33, 37, 41) !important; width: 20%;">Действия</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var employee in departmentGroup.OrderByDescending(e => e.IsHeadOfDepartment).ThenByDescending(e => e.IsDeputy).ThenBy(e => e.FullName))
                                            {
                                                <tr data-department-id="@employee.DepartmentId">
                                                    <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">
                                                        @if (!string.IsNullOrEmpty(employee.PositionDescription))
                                                        {
                                                            var badgeClass = "position-employee";
                                                            if (employee.IsHeadOfDepartment)
                                                            {
                                                                badgeClass = "position-head";
                                                            }
                                                            else if (employee.IsDeputy)
                                                            {
                                                                badgeClass = "position-deputy";
                                                            }
                                                            <span class="position-badge @badgeClass">
                                                                @employee.PositionDescription
                                                            </span>
                                                            @if (!string.IsNullOrEmpty(employee.FullName))
                                                            {
                                                                <strong>@employee.FullName</strong>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted fst-italic">-</span>
                                                        }
                                                    </td>
                                                    <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">@(employee.CityPhone ?? "Не указано")</td>
                                                    <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">@(employee.LocalPhone ?? "Не указано")</td>
                                                    <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">@(employee.Email ?? "Не указано")</td>
                                                    <td class="text-center">
                                                        <div class="d-flex gap-2 justify-content-center">
                                                            <a asp-page="/Employees/Edit" asp-route-id="@employee.Id" asp-route-returnUrl="/Employees/Manage" class="btn btn-sm btn-outline-primary">
                                                                <i class="fas fa-edit me-1"></i>Изменить
                                                            </a>
                                                            <a asp-page="/Employees/Delete" asp-route-id="@employee.Id" asp-route-returnUrl="/Employees/Manage" class="btn btn-sm btn-outline-danger">
                                                                <i class="fas fa-trash me-1"></i>Удалить
                                                            </a>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
            @if (!Model.Employees.Any())
            {
                <div class="text-center text-muted py-4">Сотрудники не найдены</div>
            }
            </div>
        </div>
        
        @if (Model.TotalPages > 1)
        {
            <nav id="paginationNav" aria-label="Навигация по страницам" class="mt-2">
                <ul class="pagination justify-content-center flex-wrap">
                    @if (Model.PageNumber > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="?pageNumber=@(Model.PageNumber - 1)&departmentsPerPage=@Model.DepartmentsPerPage">
                                <i class="fas fa-chevron-left me-1"></i>Предыдущая
                            </a>
                        </li>
                    }
                    
                    @for (int i = Math.Max(1, Model.PageNumber - 2); i <= Math.Min(Model.TotalPages, Model.PageNumber + 2); i++)
                    {
                        <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                            <a class="page-link" href="?pageNumber=@i&departmentsPerPage=@Model.DepartmentsPerPage">@i</a>
                        </li>
                    }
                    
                    @if (Model.PageNumber < Model.TotalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" href="?pageNumber=@(Model.PageNumber + 1)&departmentsPerPage=@Model.DepartmentsPerPage">
                                Следующая<i class="fas fa-chevron-right ms-1"></i>
                            </a>
                        </li>
                    }
                </ul>
            </nav>
        }
        @if (Model.DepartmentsPerPage.HasValue && Model.DepartmentsPerPage.Value > 0)
        {
            <div class="text-center text-muted small mt-2">
                <div id="paginationInfo" class="d-block d-md-inline">Страница @Model.PageNumber из @Model.TotalPages</div>
                <div class="d-block d-md-inline ms-md-2">Показано @Model.Employees.Count() сотрудников из @Model.TotalEmployees</div>
            </div>
        }
    </div>
</div>

<style>
.department-name-badge {
    display: inline-block;
    background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 50%, #11998e 100%);
    color: #000;
    padding: 6px 12px;
    border-radius: 15px;
    font-weight: bold;
    font-size: 0.9em;
    border: 2px solid rgba(0, 0, 0, 0.1);
    box-shadow: 0 2px 6px rgba(86, 171, 47, 0.2);
    text-align: center;
    margin: 0 auto;
    width: fit-content;
    min-width: 80px;
}

.department-header {
    background: none !important;
    text-align: center;
    padding: 10px 0;
}

.department-section {
    margin-bottom: 20px;
}

.employees-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
}

.employees-table th {
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    padding: 8px;
    text-align: center;
    vertical-align: middle;
    font-weight: bold;
}

.employees-table td {
    border: 1px solid #dee2e6;
    padding: 8px;
    text-align: center;
    vertical-align: middle;
}

.employee-name {
    font-weight: 500;
}

.phone-number {
    text-align: center;
}

.position-badge {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.8em;
    font-weight: bold;
    margin-right: 8px;
}

.position-head {
    background: linear-gradient(45deg, #ffc107, #e0a800);
    color: #000;
}

.position-deputy {
    background: linear-gradient(45deg, #9c27b0, #7b1fa2);
    color: white;
}

.position-employee {
    background: linear-gradient(45deg, #007bff, #0056b3);
    color: white;
}
    
.expand-search-toggle {
    display: flex;
    align-items: center;
}
    
.expand-search-label {
    display: inline-flex;
    align-items: center;
    gap: 5px;
    padding: 5px 12px;
    background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 50%, #11998e 100%);
    color: #000;
    border-radius: 15px;
    font-weight: 600;
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(86, 171, 47, 0.2);
    border: 2px solid rgba(0, 0, 0, 0.1);
}
    
.expand-search-label:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(86, 171, 47, 0.3);
}
    
.expand-search-label .expand-icon {
    transition: transform 0.3s ease;
}
    
#expandSearch:checked ~ .expand-search-label .expand-icon {
    transform: rotate(180deg);
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const expandSearchCheckbox = document.getElementById('expandSearch');
    const advancedSearch = document.getElementById('advancedSearch');
    const expandLabel = document.querySelector('.expand-search-label');
    
    expandLabel.addEventListener('click', function(e) {
        e.preventDefault();
        expandSearchCheckbox.checked = !expandSearchCheckbox.checked;
        
        if (expandSearchCheckbox.checked) {
            advancedSearch.style.display = 'block';
        } else {
            advancedSearch.style.display = 'none';
        }
    });
    
    const searchInput = document.getElementById('search');
    const employeesSelect = document.getElementById('employees');
    const departmentsSelect = document.getElementById('departments');
    const positionsSelect = document.getElementById('positions');
    const phoneSearchInput = document.getElementById('phoneSearch');
    const positionSearchInput = document.getElementById('positionSearch');
    const emailSearchInput = document.getElementById('emailSearch');
    const departmentSearchInput = document.getElementById('departmentSearch');
    const departmentFullNameSearchInput = document.getElementById('departmentFullNameSearch');
    const departmentShortNameSearchInput = document.getElementById('departmentShortNameSearch');
    const tbody = document.getElementById('employeesTable');
    const resetFiltersBtn = document.getElementById('resetFiltersBtn');
    
    let typingTimer;
    
    function performSearch() {
        const searchTerm = searchInput.value;
        const selectedEmployees = Array.from(employeesSelect.selectedOptions).map(option => option.value);
        const selectedDepartments = Array.from(departmentsSelect.selectedOptions).map(option => option.value);
        const selectedPositions = Array.from(positionsSelect.selectedOptions).map(option => option.value);
        const phoneSearch = phoneSearchInput.value;
        const positionSearch = positionSearchInput.value;
        const emailSearch = emailSearchInput.value;
        const departmentSearch = departmentSearchInput ? departmentSearchInput.value.trim() : '';
        
        const params = new URLSearchParams();
        if (searchTerm) params.append('search', searchTerm);
        if (phoneSearch) params.append('phoneSearch', phoneSearch);
        if (positionSearch) params.append('positionSearch', positionSearch);
        if (emailSearch) params.append('emailSearch', emailSearch);
        if (departmentSearch) params.append('departmentSearch', departmentSearch);
        selectedEmployees.forEach(emp => params.append('selectedEmployees', emp));
        selectedDepartments.forEach(dept => params.append('departments', dept));
        selectedPositions.forEach(pos => params.append('positions', pos));
        
        fetch(`/api/search?${params.toString()}`)
            .then(response => response.json())
            .then(data => {
                if (data.employees && data.employees.length > 0) {
                    const grouped = data.employees.reduce((groups, emp) => {
                        const dept = emp.departmentName || 'Не назначен';
                        if (!groups[dept]) groups[dept] = [];
                        groups[dept].push(emp);
                        return groups;
                    }, {});
                    
                    let html = '';
                    const deptNames = Object.keys(grouped).sort();
                    const departmentsToShow = deptNames;
                    
                    departmentsToShow.forEach(deptName => {
                        html += `
                            <div class="department-section">
                                <div class="department-header">
                                    <span class="department-name-badge">${deptName}</span>
                                </div>

                                <table class="table mb-0">
                                    <thead class="table-dark sticky-header">
                                        <tr>
                                            <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 30%;">Должность / ФИО</th>
                                            <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 15%;">Городской номер</th>
                                            <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 15%;">Внутренний номер</th>
                                            <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 20%;">Email</th>
                                            <th class="text-center" style="border-bottom: 2px solid rgb(33, 37, 41) !important; width: 20%;">Действия</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                        `;
                        
                        grouped[deptName].forEach(emp => {
                            let positionBadge = '';
                            if (emp.positionDescription) {
                                let badgeClass = 'position-employee';
                                if (emp.isHeadOfDepartment) {
                                    badgeClass = 'position-head';
                                } else if (emp.isDeputy) {
                                    badgeClass = 'position-deputy';
                                }
                                
                                positionBadge = `<span class="position-badge ${badgeClass}">${emp.positionDescription}</span>`;
                                if (emp.fullName && emp.fullName !== '-') {
                                    positionBadge += ` <strong>${emp.fullName}</strong>`;
                                }
                            } else {
                                positionBadge = '<span class="text-muted fst-italic">-</span>';
                            }
                            
                            html += `
                                <tr data-department-id="${emp.departmentId}">
                                    <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">
                                        ${positionBadge}
                                    </td>
                                    <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">
                                        ${emp.cityPhone || 'Не указано'}
                                    </td>
                                    <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">
                                        ${emp.localPhone || 'Не указано'}
                                    </td>
                                    <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">
                                        ${emp.email || 'Не указано'}
                                    </td>
                                    <td class="text-center">
                                        <div class="d-flex gap-2 justify-content-center">
                                            <a href="/Employees/Edit/${emp.id}?returnUrl=/Employees/Manage" class="btn btn-sm btn-outline-primary">
                                                <i class="fas fa-edit me-1"></i>Изменить
                                            </a>
                                            <a href="/Employees/Delete/${emp.id}?returnUrl=/Employees/Manage" class="btn btn-sm btn-outline-danger">
                                                <i class="fas fa-trash me-1"></i>Удалить
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            `;
                        });
                        
                        html += `
                                    </tbody>
                                </table>
                            </div>
                        `;
                    });
                    
                    tbody.innerHTML = html;
                    
                    const totalEmployees = departmentsToShow.reduce((total, deptName) => {
                        return total + (grouped[deptName] ? grouped[deptName].length : 0);
                    }, 0);
                    
                    const badgeElement = document.querySelector('.search-results-header .badge');
                    if (badgeElement) {
                        badgeElement.textContent = totalEmployees;
                    }
                    
                    const headerElement = document.querySelector('.card-header h5');
                    if (headerElement) {
                        headerElement.textContent = `Список сотрудников (${totalEmployees})`;
                    }
                } else {
                    tbody.innerHTML = '<div class="text-center text-muted py-4">Сотрудники не найдены</div>';
                    
                    const badgeElement = document.querySelector('.search-results-header .badge');
                    if (badgeElement) {
                        badgeElement.textContent = '0';
                    }
                    
                    const headerElement = document.querySelector('.card-header h5');
                    if (headerElement) {
                        headerElement.textContent = 'Список сотрудников (0)';
                    }
                }
            })
            .catch(error => {
                console.error('Ошибка поиска:', error);
                tbody.innerHTML = `<div class="text-center text-danger py-4">Ошибка при выполнении поиска</div>`;

                const badgeElement = document.querySelector('.search-results-header .badge');
                if (badgeElement) {
                    badgeElement.textContent = '0';
                }

                const headerElement = document.querySelector('.card-header h5');
                if (headerElement) {
                    headerElement.textContent = 'Список сотрудников (0)';
                }
            });
    }

    function updateEmployeesList() {
        const selectedDepartments = Array.from(departmentsSelect.selectedOptions).map(option => option.value);

        const currentSelected = Array.from(employeesSelect.selectedOptions).map(option => option.value);
        
        if (selectedDepartments.length === 0) {
            employeesSelect.innerHTML = '';
            const allEmployees = @Html.Raw(Json.Serialize(Model.Employees.Where(e => !string.IsNullOrEmpty(e.FullName)).OrderBy(e => e.FullName).Select(e => e.FullName)));
            if (allEmployees && allEmployees.length > 0) {
                allEmployees.forEach(employee => {
                    const option = document.createElement('option');
                    option.value = employee;
                    option.textContent = employee;
                    if (currentSelected.includes(employee)) {
                        option.selected = true;
                    }
                    employeesSelect.appendChild(option);
                });
            } else {
                const placeholderOption = document.createElement('option');
                placeholderOption.disabled = true;
                placeholderOption.textContent = 'Нет доступных сотрудников';
                employeesSelect.appendChild(placeholderOption);
            }
        } else {
            const params = new URLSearchParams();
            selectedDepartments.forEach(id => params.append('departments', id));
            
            fetch(`/api/search?${params.toString()}`)
                .then(response => response.json())
                .then(data => {
                    if (data.employees && data.employees.length > 0) {
                        const availableEmployees = [...new Set(data.employees
                            .map(emp => emp.fullName)
                            .filter(name => name && name.trim() !== '' && name.trim() !== '-')
                        )].sort();

                        employeesSelect.innerHTML = '';
                        
                        if (availableEmployees.length > 0) {
                            availableEmployees.forEach(employee => {
                                const option = document.createElement('option');
                                option.value = employee;
                                option.textContent = employee;
                                if (currentSelected.includes(employee)) {
                                    option.selected = true;
                                }
                                employeesSelect.appendChild(option);
                            });
                        } else {
                            const placeholderOption = document.createElement('option');
                            placeholderOption.value = '';
                            placeholderOption.textContent = 'Нет доступных сотрудников';
                            placeholderOption.disabled = true;
                            placeholderOption.selected = false;
                            placeholderOption.setAttribute('data-placeholder', 'true');
                            employeesSelect.appendChild(placeholderOption);
                        }
                    } else {
                        employeesSelect.innerHTML = '';
                        
                        const placeholderOption = document.createElement('option');
                        placeholderOption.value = '';
                        placeholderOption.textContent = 'Нет доступных сотрудников';
                        placeholderOption.disabled = true;
                        placeholderOption.selected = false;
                        placeholderOption.setAttribute('data-placeholder', 'true');
                        employeesSelect.appendChild(placeholderOption);
                    }
                })
                .catch(error => {
                    console.error('Ошибка при обновлении списка сотрудников:', error);
                    
                    employeesSelect.innerHTML = '';
                    
                    const placeholderOption = document.createElement('option');
                    placeholderOption.value = '';
                    placeholderOption.textContent = 'Нет доступных сотрудников';
                    placeholderOption.disabled = true;
                    placeholderOption.selected = false;
                    placeholderOption.setAttribute('data-placeholder', 'true');
                    employeesSelect.appendChild(placeholderOption);
                });
        }
    }

    function updatePositionsList() {
        const selectedDepartments = Array.from(departmentsSelect.selectedOptions).map(option => option.value);

        const currentSelected = Array.from(positionsSelect.selectedOptions).map(option => option.value);
        
        if (selectedDepartments.length === 0) {
            positionsSelect.innerHTML = '';
            const allPositions = @Html.Raw(Json.Serialize(Model.Employees.Where(e => !string.IsNullOrEmpty(e.PositionDescription)).OrderBy(e => e.PositionDescription).Select(e => e.PositionDescription).Distinct()));
            if (allPositions && allPositions.length > 0) {
                allPositions.forEach(position => {
                    const option = document.createElement('option');
                    option.value = position;
                    option.textContent = position;
                    if (currentSelected.includes(position)) {
                        option.selected = true;
                    }
                    positionsSelect.appendChild(option);
                });
            } else {
                const placeholderOption = document.createElement('option');
                placeholderOption.disabled = true;
                placeholderOption.textContent = 'Нет доступных должностей';
                positionsSelect.appendChild(placeholderOption);
            }
        } else {
            const params = new URLSearchParams();
            selectedDepartments.forEach(id => params.append('departments', id));
            
            fetch(`/api/search?${params.toString()}`)
                .then(response => response.json())
                .then(data => {
                    if (data.employees && data.employees.length > 0) {
                        const availablePositions = [...new Set(data.employees
                            .map(emp => emp.positionDescription)
                            .filter(pos => pos && pos.trim() !== '' && pos.trim() !== '-')
                        )].sort();

                        positionsSelect.innerHTML = '';
                        
                        if (availablePositions.length > 0) {
                            availablePositions.forEach(position => {
                                const option = document.createElement('option');
                                option.value = position;
                                option.textContent = position;
                                if (currentSelected.includes(position)) {
                                    option.selected = true;
                                }
                                positionsSelect.appendChild(option);
                            });
                        } else {
                            const placeholderOption = document.createElement('option');
                            placeholderOption.value = '';
                            placeholderOption.textContent = 'Нет доступных должностей';
                            placeholderOption.disabled = true;
                            placeholderOption.selected = false;
                            placeholderOption.setAttribute('data-placeholder', 'true');
                            positionsSelect.appendChild(placeholderOption);
                        }
                    } else {
                        positionsSelect.innerHTML = '';
                        
                        const placeholderOption = document.createElement('option');
                        placeholderOption.value = '';
                        placeholderOption.textContent = 'Нет доступных должностей';
                        placeholderOption.disabled = true;
                        placeholderOption.selected = false;
                        placeholderOption.setAttribute('data-placeholder', 'true');
                        positionsSelect.appendChild(placeholderOption);
                    }
                })
                .catch(error => {
                    console.error('Ошибка при обновлении списка должностей:', error);

                    positionsSelect.innerHTML = '';
                    
                    const placeholderOption = document.createElement('option');
                    placeholderOption.value = '';
                    placeholderOption.textContent = 'Нет доступных должностей';
                    placeholderOption.disabled = true;
                    placeholderOption.selected = false;
                    placeholderOption.setAttribute('data-placeholder', 'true');
                    positionsSelect.appendChild(placeholderOption);
                });
        }
    }

    function resetFilters() {
        searchInput.value = '';
        phoneSearchInput.value = '';
        departmentSearchInput.value = '';
        positionSearchInput.value = '';
        emailSearchInput.value = '';
        if (departmentFullNameSearchInput) departmentFullNameSearchInput.value = '';
        if (departmentShortNameSearchInput) departmentShortNameSearchInput.value = '';
        
        Array.from(employeesSelect.options).forEach(option => option.selected = false);
        Array.from(departmentsSelect.options).forEach(option => option.selected = false);
        Array.from(positionsSelect.options).forEach(option => option.selected = false);
        
        updateEmployeesList();
        updatePositionsList();
        
        performSearch();
    }

    searchInput.addEventListener('input', function() {
        clearTimeout(this.searchTimeout);
        this.searchTimeout = setTimeout(performSearch, 300);
    });

    phoneSearchInput.addEventListener('input', function() {
        clearTimeout(this.searchTimeout);
        this.searchTimeout = setTimeout(performSearch, 300);
    });

    positionSearchInput.addEventListener('input', function() {
        clearTimeout(this.searchTimeout);
        this.searchTimeout = setTimeout(performSearch, 300);
    });

    emailSearchInput.addEventListener('input', function() {
        clearTimeout(this.searchTimeout);
        this.searchTimeout = setTimeout(performSearch, 300);
    });

    if (departmentSearchInput) {
        departmentSearchInput.addEventListener('input', function() {
            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(() => {
                syncDepartmentFilter();
                updateEmployeesList();
                updatePositionsList();
                performSearch();
            }, 300);
        });
    }
    
    if (departmentFullNameSearchInput) {
        departmentFullNameSearchInput.addEventListener('input', function() {
            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(() => {
                syncDepartmentByFullName();
                performSearch();
            }, 300);
        });
    }
    
    if (departmentShortNameSearchInput) {
        departmentShortNameSearchInput.addEventListener('input', function() {
            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(() => {
                syncDepartmentByShortName();
                performSearch();
            }, 300);
        });
    }
    
    function syncDepartmentByFullName() {
        const departmentFullNameSearch = departmentFullNameSearchInput ? departmentFullNameSearchInput.value.trim() : '';
        if (departmentFullNameSearch) {
            const matchingDepartments = Array.from(departmentsSelect.options).filter(option => 
                option.value && option.getAttribute('data-fullname') && 
                option.getAttribute('data-fullname').toLowerCase().includes(departmentFullNameSearch.toLowerCase())
            );
            
            Array.from(departmentsSelect.selectedOptions).forEach(option => {
                option.selected = false;
            });
            
            matchingDepartments.forEach(option => {
                option.selected = true;
            });
            
            updateEmployeesList();
            updatePositionsList();
        } else {
            Array.from(departmentsSelect.selectedOptions).forEach(option => {
                option.selected = false;
            });
            updateEmployeesList();
            updatePositionsList();
        }
    }
    
    function syncDepartmentByShortName() {
        const departmentShortNameSearch = departmentShortNameSearchInput ? departmentShortNameSearchInput.value.trim() : '';
        if (departmentShortNameSearch) {
            const matchingDepartments = Array.from(departmentsSelect.options).filter(option => 
                option.value && option.getAttribute('data-shortname') && 
                option.getAttribute('data-shortname').toLowerCase().includes(departmentShortNameSearch.toLowerCase())
            );
            
            Array.from(departmentsSelect.selectedOptions).forEach(option => {
                option.selected = false;
            });
            
            matchingDepartments.forEach(option => {
                option.selected = true;
            });
            
            updateEmployeesList();
            updatePositionsList();
        } else {
            Array.from(departmentsSelect.selectedOptions).forEach(option => {
                option.selected = false;
            });
            updateEmployeesList();
            updatePositionsList();
        }
    }
    
    function syncDepartmentFilter() {
        const departmentSearch = departmentSearchInput ? departmentSearchInput.value.trim() : '';
        if (departmentSearch) {
            const matchingDepartments = Array.from(departmentsSelect.options).filter(option => 
                option.value && option.text.toLowerCase().includes(departmentSearch.toLowerCase())
            );
            
            Array.from(departmentsSelect.selectedOptions).forEach(option => {
                option.selected = false;
            });

            matchingDepartments.forEach(option => {
                option.selected = true;
            });
        } else {
            Array.from(departmentsSelect.selectedOptions).forEach(option => {
                option.selected = false;
            });
        }
    }

    employeesSelect.addEventListener('change', function() {
        Array.from(employeesSelect.selectedOptions).forEach(option => {
            if (option.hasAttribute('data-placeholder')) {
                option.selected = false;
            }
        });
        performSearch();
    });

    departmentsSelect.addEventListener('change', function() {
        updateEmployeesList();
        updatePositionsList();
        performSearch();
    });

    positionsSelect.addEventListener('change', function() {
        Array.from(positionsSelect.selectedOptions).forEach(option => {
            if (option.hasAttribute('data-placeholder')) {
                option.selected = false;
            }
        });
        performSearch();
    });


    if (resetFiltersBtn) {
        resetFiltersBtn.addEventListener('click', resetFilters);
    }
});
</script>

<!-- Модальное окно экспорта -->
<div class="modal fade" id="exportSettingsModal" tabindex="-1" aria-labelledby="exportSettingsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exportSettingsModalLabel">Экспорт сотрудников</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="exportFormat" class="form-label">Формат экспорта:</label>
                    <select class="form-select" id="exportFormat">
                        <option value="excel">Excel (.xlsx)</option>
                        <option value="word">Word (.docx)</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Отделы для экспорта:</label>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exportDepartments" id="exportAllDepartments" value="all" checked>
                        <label class="form-check-label" for="exportAllDepartments">
                            Все отделы
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exportDepartments" id="exportSelectedDepartments" value="selected">
                        <label class="form-check-label" for="exportSelectedDepartments">
                            Выбранные отделы
                        </label>
                    </div>
                </div>
                <div id="departmentSelection" style="display: none;">
                    <label class="form-label">Выберите отделы:</label>
                    <select class="form-select" id="exportDepartmentsSelect" multiple size="5">
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" id="exportConfirmBtn">Экспорт</button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const exportModal = document.getElementById('exportSettingsModal');
    const exportFormatSelect = document.getElementById('exportFormat');
    const exportAllRadio = document.getElementById('exportAllDepartments');
    const exportSelectedRadio = document.getElementById('exportSelectedDepartments');
    const departmentSelection = document.getElementById('departmentSelection');
    const exportDepartmentsSelect = document.getElementById('exportDepartmentsSelect');
    const exportConfirmBtn = document.getElementById('exportConfirmBtn');

    exportModal.addEventListener('show.bs.modal', function() {
        loadDepartmentsForExport();
    });
    exportAllRadio.addEventListener('change', function() {
        if (this.checked) {
            departmentSelection.style.display = 'none';
        }
    });

    exportSelectedRadio.addEventListener('change', function() {
        if (this.checked) {
            departmentSelection.style.display = 'block';
        }
    });

    exportConfirmBtn.addEventListener('click', function() {
        const format = exportFormatSelect.value;
        const isAllDepartments = exportAllRadio.checked;
        let departmentIds = null;

        if (!isAllDepartments) {
            const selectedOptions = Array.from(exportDepartmentsSelect.selectedOptions);
            departmentIds = selectedOptions.map(option => parseInt(option.value));
            
            if (departmentIds.length === 0) {
                alert('Выберите хотя бы один отдел для экспорта');
                return;
            }
        }

        const modal = bootstrap.Modal.getInstance(exportModal);
        modal.hide();
        
        setTimeout(() => {
            exportEmployees(format, departmentIds);
        }, 300);
    });

    function loadDepartmentsForExport() {
        fetch('/api/search/departments')
            .then(response => response.json())
            .then(departments => {
                exportDepartmentsSelect.innerHTML = '';
                departments.forEach(dept => {
                    const option = document.createElement('option');
                    option.value = dept.id;
                    option.textContent = dept.fullName || dept.name;
                    exportDepartmentsSelect.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Ошибка загрузки отделов:', error);
            });
    }

    function exportEmployees(format, departmentIds) {
        const requestData = {
            DepartmentIds: departmentIds
        };


        const url = format === 'excel' ? '/api/export/excel' : '/api/export/word';
        
        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestData)
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => {
                    console.error('Ошибка сервера:', text);
                    throw new Error(`Ошибка сервера: ${response.status} - ${text}`);
                });
            }
            return response.blob();
        })
        .then(blob => {
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `Сотрудники_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.${format === 'excel' ? 'xlsx' : 'docx'}`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        })
        .catch(error => {
            console.error('Ошибка экспорта:', error);
            alert(`Ошибка при экспорте файла: ${error.message}`);
        });
    }
});
</script>