@page
@model ManageModel
@{
    ViewData["Title"] = "Управление сотрудниками";
}

<div class="container-fluid fade-in-up">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="fas fa-users me-2"></i>Управление сотрудниками</h2>
                <div class="d-flex gap-2">
                    <a class="btn btn-success" href="/Employees/Create?returnUrl=%2FEmployees%2FManage">
                        <i class="fas fa-plus me-1"></i>Добавить сотрудника
                    </a>
                    <a asp-page="/Admin/Index" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left me-2"></i>Назад к списку
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="search-filters-container">
        <div class="search-filters-header">
            <h6><i class="fas fa-search"></i>Поиск и фильтрация</h6>
        </div>
        
        <div class="row g-3 mb-3 justify-content-center">
            <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                <div class="search-input-group">
                    <label for="search" class="form-label">
                        <i class="fas fa-search"></i>Поиск по ФИО
                    </label>
                    <input type="text" class="form-control" id="search" placeholder="Введите ФИО для поиска">
                </div>
            </div>
            <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                <div class="search-input-group">
                    <label for="phoneSearch" class="form-label">
                        <i class="fas fa-phone"></i>Поиск по телефону
                    </label>
                    <input type="text" class="form-control" id="phoneSearch" placeholder="Городской или местный номер...">
                </div>
            </div>
            <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                <div class="search-input-group">
                    <label for="positionSearch" class="form-label">
                        <i class="fas fa-user-tie"></i>Поиск по должности
                    </label>
                    <input type="text" class="form-control" id="positionSearch" placeholder="Введите должность...">
                </div>
            </div>
        </div>
        
        <div class="row g-3 mb-3 justify-content-center">
            <div class="col-12 col-sm-6 col-md-4 col-lg-6">
                <div class="search-input-group">
                    <label for="emailSearch" class="form-label">
                        <i class="fas fa-envelope"></i>Поиск по Email
                    </label>
                    <input type="text" class="form-control" id="emailSearch" placeholder="Введите email...">
                </div>
            </div>
            <div class="col-12 col-sm-6 col-md-4 col-lg-6">
                <div class="search-input-group">
                    <label for="departmentSearch" class="form-label">
                        <i class="fas fa-building"></i>Поиск по отделу
                    </label>
                    <input type="text" class="form-control" id="departmentSearch" placeholder="Введите название отдела" />
                </div>
            </div>
        </div>
        
        <div class="row g-3 mb-3 justify-content-center">
            <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                <div class="search-select-group">
                    <label for="employees" class="form-label">
                        <i class="fas fa-users"></i>ФИО
                    </label>
                    <select class="form-select" id="employees" multiple size="3">
                        @if (Model.Employees.Where(e => !string.IsNullOrEmpty(e.FullName)).Any())
                        {
                            @foreach (var employee in Model.Employees.Where(e => !string.IsNullOrEmpty(e.FullName)).Select(e => e.FullName).Distinct().OrderBy(e => e))
                            {
                                <option value="@employee">@employee</option>
                            }
                        }
                        else
                        {
                            <option disabled>Нет доступных сотрудников</option>
                        }
                    </select>
                    <div class="search-help-text">Удерживайте Ctrl для выбора нескольких</div>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                <div class="search-select-group">
                    <label for="departments" class="form-label">
                        <i class="fas fa-building"></i>Отделы
                    </label>
                    <select class="form-select" id="departments" multiple size="3">
                        @if (Model.Departments.Any())
                        {
                            @foreach (var department in Model.Departments)
                            {
                                <option value="@department.Id">@department.Name</option>
                            }
                        }
                        else
                        {
                            <option disabled>Нет доступных отделов</option>
                        }
                    </select>
                    <div class="search-help-text">Удерживайте Ctrl для выбора нескольких</div>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                <div class="search-select-group">
                    <label for="positions" class="form-label">
                        <i class="fas fa-user-tie"></i>Должности
                    </label>
                    <select class="form-select" id="positions" multiple size="3">
                        @if (Model.Employees.Select(e => e.PositionDescription).Where(p => !string.IsNullOrEmpty(p)).Any())
                        {
                            @foreach (var position in Model.Employees.Select(e => e.PositionDescription).Where(p => !string.IsNullOrEmpty(p)).Distinct().OrderBy(p => p))
                            {
                                <option value="@position">@position</option>
                            }
                        }
                        else
                        {
                            <option disabled>Нет доступных должностей</option>
                        }
                    </select>
                    <div class="search-help-text">Удерживайте Ctrl для выбора нескольких</div>
                </div>
            </div>
        </div>
        
        <div class="search-actions">
            <button type="button" id="resetFiltersBtn" class="btn btn-outline-danger w-100">
                <i class="fas fa-times"></i>Сброс фильтров
            </button>
        </div>
    </div>
    

    <div class="search-results-header">
        <div class="d-flex flex-wrap justify-content-between align-items-center gap-2">
            <h5><i class="fas fa-users"></i>Список сотрудников <span class="badge">@Model.Employees.Count()</span></h5>
            <div class="d-flex flex-wrap align-items-center gap-2">
                <select class="form-select" id="departmentsPerPage" style="width: auto; background: rgba(255,255,255,0.2); border: 1px solid rgba(255,255,255,0.3); color: white;">
                    <option value="1" style="color: #333; background: white;">1 отдел</option>
                    <option value="2" style="color: #333; background: white;">2 отдела</option>
                    <option value="3" style="color: #333; background: white;">3 отдела</option>
                    <option value="4" style="color: #333; background: white;">4 отдела</option>
                    <option value="5" style="color: #333; background: white;">5 отделов</option>
                    <option value="0" selected style="color: #333; background: white;">Все отделы</option>
                </select>
                <button type="button" id="printBtn" class="btn" style="background: rgba(255,255,255,0.2); border: 1px solid rgba(255,255,255,0.3); color: white;">
                    <i class="fas fa-print"></i> Печать
                </button>
            </div>
        </div>
    </div>
    
    <div class="card">
        <div class="card-body p-0">
        <div class="card-body p-0">
            <div id="employeesTable">
                            @{
                                var groupedEmployees = Model.Employees.GroupBy(e => e.Department.Name).OrderBy(g => g.Key);
                            }
                            @foreach (var departmentGroup in groupedEmployees)
                            {
                                <div class="department-section">
                                    <div class="department-header">
                                        <span class="department-name-badge">@departmentGroup.Key</span>
                                    </div>

                                    <table id="employeesTable" class="table mb-0">
                                        <thead class="table-dark sticky-header">
                                            <tr>
                                                <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 30%;">Должность / ФИО</th>
                                                <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 15%;">Городской номер</th>
                                                <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 15%;">Местный номер</th>
                                                <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 20%;">Email</th>
                                                <th class="text-center" style="border-bottom: 2px solid rgb(33, 37, 41) !important; width: 20%;">Действия</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var employee in departmentGroup)
                                            {
                                                <tr data-department-id="@employee.DepartmentId">
                                                    <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">
                                                        @if (!string.IsNullOrEmpty(employee.PositionDescription))
                                                        {
                                                            <span class="position-badge @(employee.IsHeadOfDepartment ? "position-head" : "position-employee")">
                                                                @employee.PositionDescription
                                                            </span>
                                                            @if (!string.IsNullOrEmpty(employee.FullName))
                                                            {
                                                                <strong>@employee.FullName</strong>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted fst-italic">-</span>
                                                        }
                                                    </td>
                                                    <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">@(employee.CityPhone ?? "Не указано")</td>
                                                    <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">@(employee.LocalPhone ?? "Не указано")</td>
                                                    <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">@(employee.Email ?? "Не указано")</td>
                                                    <td class="text-center">
                                                        <div class="d-flex gap-2 justify-content-center">
                                                            <a asp-page="/Employees/Edit" asp-route-id="@employee.Id" asp-route-returnUrl="/Employees/Manage" class="btn btn-sm btn-outline-primary">
                                                                <i class="fas fa-edit me-1"></i>Изменить
                                                            </a>
                                                            <a asp-page="/Employees/Delete" asp-route-id="@employee.Id" asp-route-returnUrl="/Employees/Manage" class="btn btn-sm btn-outline-danger">
                                                                <i class="fas fa-trash me-1"></i>Удалить
                                                            </a>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
            @if (!Model.Employees.Any())
            {
                <div class="text-center text-muted py-4">Сотрудники не найдены</div>
            }
            </div>
        </div>
        
        @if (Model.TotalPages > 1)
        {
            <nav id="paginationNav" aria-label="Навигация по страницам" class="mt-2">
                <ul class="pagination justify-content-center flex-wrap">
                    @if (Model.PageNumber > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="?pageNumber=@(Model.PageNumber - 1)&departmentsPerPage=@Model.DepartmentsPerPage">
                                <i class="fas fa-chevron-left me-1"></i>Предыдущая
                            </a>
                        </li>
                    }
                    
                    @for (int i = Math.Max(1, Model.PageNumber - 2); i <= Math.Min(Model.TotalPages, Model.PageNumber + 2); i++)
                    {
                        <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                            <a class="page-link" href="?pageNumber=@i&departmentsPerPage=@Model.DepartmentsPerPage">@i</a>
                        </li>
                    }
                    
                    @if (Model.PageNumber < Model.TotalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" href="?pageNumber=@(Model.PageNumber + 1)&departmentsPerPage=@Model.DepartmentsPerPage">
                                Следующая<i class="fas fa-chevron-right ms-1"></i>
                            </a>
                        </li>
                    }
                </ul>
            </nav>
        }
        @if (Model.DepartmentsPerPage.HasValue && Model.DepartmentsPerPage.Value > 0)
        {
            <div class="text-center text-muted small mt-2">
                <div id="paginationInfo" class="d-block d-md-inline">Страница @Model.PageNumber из @Model.TotalPages</div>
                <div class="d-block d-md-inline ms-md-2">Показано @Model.Employees.Count() сотрудников из @Model.TotalEmployees</div>
            </div>
        }
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('search');
    const employeesSelect = document.getElementById('employees');
    const departmentsSelect = document.getElementById('departments');
    const positionsSelect = document.getElementById('positions');
    const departmentsPerPageSelect = document.getElementById('departmentsPerPage');
    const phoneSearchInput = document.getElementById('phoneSearch');
    const positionSearchInput = document.getElementById('positionSearch');
    const emailSearchInput = document.getElementById('emailSearch');
    const departmentSearchInput = document.getElementById('departmentSearch');
    const tbody = document.getElementById('employeesTable');
    
    let typingTimer;
    
    function performSearch() {
            const searchTerm = searchInput.value;
            const phoneSearch = phoneSearchInput.value;
            const positionSearch = positionSearchInput.value;
            const emailSearch = emailSearchInput.value;
            const departmentSearch = departmentSearchInput ? departmentSearchInput.value.trim() : '';
            const departmentsPerPage = departmentsPerPageSelect.value;
            const selectedEmployees = Array.from(employeesSelect.selectedOptions).map(option => option.value);
            const selectedDepartments = Array.from(departmentsSelect.selectedOptions).map(option => option.value);
            const selectedPositions = Array.from(positionsSelect.selectedOptions).map(option => option.value);

            tbody.innerHTML = '<tr><td colspan="4" class="text-center"><div class="spinner-border" role="status"><span class="visually-hidden">Загрузка...</span></div></td></tr>';

            const params = new URLSearchParams();
            if (searchTerm) params.append('search', searchTerm);
            if (phoneSearch) params.append('phoneSearch', phoneSearch);
            if (positionSearch) params.append('positionSearch', positionSearch);
            if (emailSearch) params.append('emailSearch', emailSearch);
            if (departmentSearch) {
                params.append('departmentSearch', departmentSearch);
            }
            if (departmentsPerPage) params.append('departmentsPerPage', departmentsPerPage);
            selectedEmployees.forEach(emp => params.append('selectedEmployees', emp));
            selectedDepartments.forEach(id => params.append('departments', id));
            selectedPositions.forEach(pos => params.append('positions', pos));

            fetch(`/api/search?${params.toString()}`)
                .then(response => response.json())
                .then(data => {
                    if (data.employees && data.employees.length > 0) {
                        const grouped = data.employees.reduce((groups, emp) => {
                            const dept = emp.DepartmentName;
                            if (!groups[dept]) groups[dept] = [];
                            groups[dept].push(emp);
                            return groups;
                        }, {});

                        let html = '';
                        const deptNames = Object.keys(grouped).sort();
                        const maxDepartments = departmentsPerPage === '0' ? deptNames.length : parseInt(departmentsPerPage);
                        const departmentsToShow = deptNames.slice(0, maxDepartments);
                        
                        departmentsToShow.forEach(deptName => {
                            html += `
                                <div class="department-section">
                                    <div class="department-header">
                                        <span class="department-name-badge">${deptName}</span>
                                    </div>

                                    <table id="employeesTable" class="table mb-0">
                                        <thead class="table-dark sticky-header">
                                            <tr>
                                                <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 30%;">Должность / ФИО</th>
                                                <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 15%;">Городской номер</th>
                                                <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 15%;">Местный номер</th>
                                                <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 20%;">Email</th>
                                                <th class="text-center" style="border-bottom: 2px solid rgb(33, 37, 41) !important; width: 20%;">Действия</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                            `;
                            grouped[deptName].forEach(emp => {
                                let positionBadge = '';
                                if (emp.PositionDescription) {
                                    const isHead = emp.IsHeadOfDepartment;
                                    const badgeClass = isHead ? 'position-head' : 'position-employee';
                                    
                                    positionBadge = `<span class="position-badge ${badgeClass}">${emp.PositionDescription}</span>`;
                                    if (emp.FullName && emp.FullName !== '-') {
                                        positionBadge += `<strong>${emp.FullName}</strong>`;
                                    }
                                } else {
                                    positionBadge = '<span class="text-muted fst-italic">-</span>';
                                }

                                html += `
                                            <tr data-department-id="${emp.DepartmentId}">
                                                <td class="employee-name">
                                                    ${positionBadge}
                                                </td>
                                                <td class="phone-number">${emp.CityPhone || 'Не указано'}</td>
                                                <td class="phone-number">${emp.LocalPhone || 'Не указано'}</td>
                                                <td class="phone-number">${emp.Email || 'Не указано'}</td>
                                                <td class="text-center">
                                                    <div class="btn-group" role="group">
                                                        <a href="/Employees/Edit?id=${emp.Id}&returnUrl=/Employees/Manage" class="btn btn-sm btn-outline-warning" title="Редактировать">
                                                            <i class="fas fa-edit"></i>
                                                        </a>
                                                        <a href="/Employees/Delete?id=${emp.Id}&returnUrl=/Employees/Manage" class="btn btn-sm btn-outline-danger" title="Удалить">
                                                            <i class="fas fa-trash"></i>
                                                        </a>
                                                    </div>
                                                </td>
                                            </tr>
                                `;
                            });
                            
                            html += `
                                        </tbody>
                                    </table>
                                </div>
                            `;
                        });
                        tbody.innerHTML = html;
                        updateEmployeeCount();
                    } else {
                        tbody.innerHTML = '<tr><td colspan="4" class="text-center text-muted">Сотрудники не найдены</td></tr>';
                        updateEmployeeCount();
                    }
                })
                .catch(error => {
                    console.error('Ошибка поиска:', error);
                    tbody.innerHTML = '<tr><td colspan="4" class="text-center text-danger">Ошибка при выполнении поиска</td></tr>';
                });
        }

        function updateEmployeeCount() {
            const visibleRows = Array.from(tbody.querySelectorAll('tbody tr')).filter(row => {
                const isServiceRow = row.classList.contains('text-center');
                const isHidden = row.style.display === 'none';
                return !isServiceRow && !isHidden;
            });
            const count = visibleRows.length;
            const countElement = document.querySelector('.card-header h5');
            if (countElement) {
                countElement.textContent = `Список сотрудников (${count})`;
            }
        }

        searchInput.addEventListener('input', function() {
            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(performSearch, 300);
        });

        phoneSearchInput.addEventListener('input', function() {
            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(performSearch, 300);
        });

        positionSearchInput.addEventListener('input', function() {
            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(performSearch, 300);
        });
        
        emailSearchInput.addEventListener('input', function() {
            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(performSearch, 300);
        });

        departmentsPerPageSelect.addEventListener('change', function() {
            const selectedValue = this.value;
            if (selectedValue === '0') {
                const paginationNav = document.getElementById('paginationNav');
                if (paginationNav) {
                    paginationNav.style.display = 'none';
                }
                const paginationInfo = document.getElementById('paginationInfo');
                if (paginationInfo) {
                    paginationInfo.textContent = '';
                }
                const paginationInfoSecond = document.querySelector('#paginationInfo + .d-block.d-md-inline');
                if (paginationInfoSecond) {
                    paginationInfoSecond.textContent = '';
                }
                performSearch();
            } else {
                const currentUrl = new URL(window.location);
                currentUrl.searchParams.set('departmentsPerPage', selectedValue);
                currentUrl.searchParams.delete('pageNumber');
                window.location.href = currentUrl.toString();
            }
        });

        function updatePositionsList() {
            const selectedDepartments = Array.from(departmentsSelect.selectedOptions).map(option => option.value);
            
            if (selectedDepartments.length === 0) {
                Array.from(positionsSelect.options).forEach(option => {
                    option.style.display = '';
                });
            } else {
                const params = new URLSearchParams();
                selectedDepartments.forEach(id => params.append('departments', id));
                
                fetch(`/api/search?${params.toString()}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.employees && data.employees.length > 0) {
                            const availablePositions = [...new Set(data.employees
                                .map(emp => emp.PositionDescription)
                                .filter(pos => pos && pos.trim() !== '')
                            )].sort();
                            
                            Array.from(positionsSelect.options).forEach(option => {
                                if (option.value === '') {
                                    option.style.display = ''; 
                                } else {
                                    option.style.display = availablePositions.includes(option.value) ? '' : 'none';
                                }
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Ошибка при обновлении списка должностей:', error);
                    });
            }
        }

        function updateEmployeesList() {
            const selectedDepartments = Array.from(departmentsSelect.selectedOptions).map(option => option.value);
            
            if (selectedDepartments.length === 0) {
                Array.from(employeesSelect.options).forEach(option => {
                    option.style.display = '';
                });
        }

        positionsSelect.addEventListener('change', performSearch);
        

        const urlParams = new URLSearchParams(window.location.search);
        const departmentsPerPageFromUrl = urlParams.get('departmentsPerPage');
        if (departmentsPerPageFromUrl) {
            departmentsPerPageSelect.value = departmentsPerPageFromUrl;
        }

        const paginationNav = document.getElementById('paginationNav');
        if (paginationNav) {
            const currentDepartmentsPerPage = departmentsPerPageSelect.value;
            if (currentDepartmentsPerPage === '0') {
                paginationNav.style.display = 'none';
            } else {
                paginationNav.style.display = paginationNav.children.length > 0 ? 'block' : 'none';
            }
        }
        
        updateEmployeeCount();
    });
</script>

<style>
.department-name-badge {
    display: inline-block;
    background: linear-gradient(135deg, #6f42c1, #9c27b0);
    color: white;
    padding: 6px 12px;
    border-radius: 15px;
    font-weight: bold;
    font-size: 0.9em;
    border: 2px solid #6f42c1;
    box-shadow: 0 2px 6px rgba(111, 66, 193, 0.2);
    text-align: center;
    margin: 0 auto;
    width: fit-content;
    min-width: 80px;
}

.department-header {
    background: none !important;
    text-align: center;
    padding: 10px 0;
}

.department-section {
    margin-bottom: 20px;
}

.employees-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
}

.employees-table th {
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    padding: 8px;
    text-align: center;
    vertical-align: middle;
    font-weight: bold;
}

.employees-table td {
    border: 1px solid #dee2e6;
    padding: 8px;
    text-align: center;
    vertical-align: middle;
}

.employee-name {
    font-weight: 500;
}

.phone-number {
    text-align: center;
}

.position-badge {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.8em;
    font-weight: bold;
    margin-right: 8px;
}

.position-head {
    background: linear-gradient(45deg, #ffc107, #e0a800);
    color: #000;
}

.position-employee {
    background: linear-gradient(45deg, #007bff, #0056b3);
    color: white;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('search');
    const employeesSelect = document.getElementById('employees');
    const departmentsSelect = document.getElementById('departments');
    const positionsSelect = document.getElementById('positions');
    const departmentsPerPageSelect = document.getElementById('departmentsPerPage');
    const phoneSearchInput = document.getElementById('phoneSearch');
    const positionSearchInput = document.getElementById('positionSearch');
    const emailSearchInput = document.getElementById('emailSearch');
    const departmentSearchInput = document.getElementById('departmentSearch');
    const tbody = document.getElementById('employeesTable');
    const resetFiltersBtn = document.getElementById('resetFiltersBtn');
    
    let typingTimer;
    
    function performSearch() {
        const searchTerm = searchInput.value;
        const selectedEmployees = Array.from(employeesSelect.selectedOptions).map(option => option.value);
        const selectedDepartments = Array.from(departmentsSelect.selectedOptions).map(option => option.value);
        const selectedPositions = Array.from(positionsSelect.selectedOptions).map(option => option.value);
        const departmentsPerPage = departmentsPerPageSelect.value;
        const phoneSearch = phoneSearchInput.value;
        const positionSearch = positionSearchInput.value;
        const emailSearch = emailSearchInput.value;
        const departmentSearch = departmentSearchInput ? departmentSearchInput.value.trim() : '';

        tbody.innerHTML = `<div class="text-center p-4"><div class="spinner-border" role="status"><span class="visually-hidden">Загрузка...</span></div></div>`;

        const params = new URLSearchParams();
        if (searchTerm) params.append('search', searchTerm);
        if (phoneSearch) params.append('phoneSearch', phoneSearch);
        if (positionSearch) params.append('positionSearch', positionSearch);
        if (emailSearch) params.append('emailSearch', emailSearch);
        if (departmentSearch) params.append('departmentSearch', departmentSearch);
        selectedDepartments.forEach(id => params.append('departments', id));
        selectedEmployees.forEach(emp => params.append('selectedEmployees', emp));
        selectedPositions.forEach(pos => params.append('positions', pos));
        if (departmentsPerPage) params.append('departmentsPerPage', departmentsPerPage);
        
        fetch(`/api/search?${params.toString()}`)
            .then(response => response.json())
            .then(data => {
                if (data.employees && data.employees.length > 0) {
                    const grouped = data.employees.reduce((groups, emp) => {
                        const dept = emp.departmentName;
                        if (!groups[dept]) groups[dept] = [];
                        groups[dept].push(emp);
                        return groups;
                    }, {});

                    let html = '';
                    Object.keys(grouped).sort().forEach(deptName => {
                        html += `
                            <div class="department-section">
                                <div class="department-header">
                                    <span class="department-name-badge">${deptName}</span>
                                </div>

                                <table id="employeesTable" class="table mb-0">
                                    <thead class="table-dark sticky-header">
                                        <tr>
                                            <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 30%;">Должность / ФИО</th>
                                            <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 15%;">Городской номер</th>
                                            <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 15%;">Местный номер</th>
                                            <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 20%;">Email</th>
                                            <th class="text-center" style="border-bottom: 2px solid rgb(33, 37, 41) !important; width: 20%;">Действия</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                        `;
                        grouped[deptName].forEach(emp => {
                            let positionBadge = '';
                            if (emp.positionDescription) {
                                const isHead = emp.isHeadOfDepartment;
                                const badgeClass = isHead ? 'position-head' : 'position-employee';
                                
                                positionBadge = `<span class="position-badge ${badgeClass}">${emp.positionDescription}</span>`;
                                if (emp.fullName && emp.fullName !== '-') {
                                    positionBadge += `<strong>${emp.fullName}</strong>`;
                                }
                            } else {
                                positionBadge = '<span class="text-muted fst-italic">-</span>';
                            }

                            html += `
                                        <tr data-department-id="${emp.departmentId}">
                                            <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">
                                                ${positionBadge}
                                            </td>
                                            <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">${emp.cityPhone || 'Не указано'}</td>
                                            <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">${emp.localPhone || 'Не указано'}</td>
                                            <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">${emp.email || 'Не указано'}</td>
                                            <td class="text-center">
                                                <div class="d-flex gap-2 justify-content-center">
                                                    <a href="/Employees/Edit?id=${emp.id}&returnUrl=/Employees/Manage" class="btn btn-sm btn-outline-primary" title="Редактировать">
                                                        <i class="fas fa-edit"></i>
                                                    </a>
                                                    <a href="/Employees/Delete?id=${emp.id}&returnUrl=/Employees/Manage" class="btn btn-sm btn-outline-danger" title="Удалить">
                                                        <i class="fas fa-trash"></i>
                                                    </a>
                                                </div>
                                            </td>
                                        </tr>
                            `;
                        });
                        html += `
                                    </tbody>
                                </table>
                            </div>
                        `;
                    });
                    tbody.innerHTML = html;

                    const badgeElement = document.querySelector('.search-results-header .badge');
                    if (badgeElement) {
                        badgeElement.textContent = data.employees.length;
                    }
                    
                    const headerElement = document.querySelector('.card-header h5');
                    if (headerElement) {
                        headerElement.textContent = `Список сотрудников (${data.employees.length})`;
                    }
                    
                    const paginationNav = document.getElementById('paginationNav');
                    if (paginationNav) {
                        if (departmentsPerPage === '0') {
                            paginationNav.style.display = 'none';
                        } else {
                            paginationNav.style.display = paginationNav.children.length > 0 ? 'block' : 'none';
                        }
                    }
                    
                } else {
                    tbody.innerHTML = `<div class="text-center text-muted py-4">Сотрудники не найдены</div>`;

                    const badgeElement = document.querySelector('.search-results-header .badge');
                    if (badgeElement) {
                        badgeElement.textContent = '0';
                    }

                    const headerElement = document.querySelector('.card-header h5');
                    if (headerElement) {
                        headerElement.textContent = 'Список сотрудников (0)';
                    }
                }
            })
            .catch(error => {
                console.error('Ошибка поиска:', error);
                tbody.innerHTML = `<div class="text-center text-danger py-4">Ошибка при выполнении поиска</div>`;

                const badgeElement = document.querySelector('.search-results-header .badge');
                if (badgeElement) {
                    badgeElement.textContent = '0';
                }

                const headerElement = document.querySelector('.card-header h5');
                if (headerElement) {
                    headerElement.textContent = 'Список сотрудников (0)';
                }
            });
    }

    function updateEmployeesList() {
        const selectedDepartments = Array.from(departmentsSelect.selectedOptions).map(option => option.value);

        const currentSelected = Array.from(employeesSelect.selectedOptions).map(option => option.value);
        
        if (selectedDepartments.length === 0) {
            employeesSelect.innerHTML = '';
            const allEmployees = @Html.Raw(Json.Serialize(Model.Employees.Where(e => !string.IsNullOrEmpty(e.FullName)).OrderBy(e => e.FullName).Select(e => e.FullName)));
            allEmployees.forEach(employee => {
                const option = document.createElement('option');
                option.value = employee;
                option.textContent = employee;
                if (currentSelected.includes(employee)) {
                    option.selected = true;
                }
                employeesSelect.appendChild(option);
            });
        } else {
            const params = new URLSearchParams();
            selectedDepartments.forEach(id => params.append('departments', id));
            
            fetch(`/api/search?${params.toString()}`)
                .then(response => response.json())
                .then(data => {
                    if (data.employees && data.employees.length > 0) {
                        const availableEmployees = [...new Set(data.employees
                            .map(emp => emp.fullName)
                            .filter(name => name && name.trim() !== '' && name.trim() !== '-')
                        )].sort();

                        employeesSelect.innerHTML = '';
                        
                        if (availableEmployees.length > 0) {
                            availableEmployees.forEach(employee => {
                                const option = document.createElement('option');
                                option.value = employee;
                                option.textContent = employee;
                                if (currentSelected.includes(employee)) {
                                    option.selected = true;
                                }
                                employeesSelect.appendChild(option);
                            });
                        } else {
                            const placeholderOption = document.createElement('option');
                            placeholderOption.value = '';
                            placeholderOption.textContent = 'Нет сотрудников с ФИО в выбранных отделах';
                            placeholderOption.disabled = true;
                            placeholderOption.selected = false;
                            placeholderOption.style.color = '#6c757d';
                            placeholderOption.style.fontStyle = 'italic';
                            placeholderOption.style.backgroundColor = 'transparent';
                            placeholderOption.setAttribute('data-placeholder', 'true');
                            employeesSelect.appendChild(placeholderOption);
                        }
                    } else {
                        employeesSelect.innerHTML = '';
                    }
                })
                .catch(error => {
                    console.error('Ошибка при обновлении списка сотрудников:', error);
                    
                    employeesSelect.innerHTML = '';
                    
                    const placeholderOption = document.createElement('option');
                    placeholderOption.value = '';
                    placeholderOption.textContent = 'Ошибка загрузки данных';
                    placeholderOption.disabled = true;
                    placeholderOption.selected = false;
                    placeholderOption.style.color = '#dc3545';
                    placeholderOption.style.fontStyle = 'italic';
                    placeholderOption.style.backgroundColor = 'rgba(220, 53, 69, 0.1)';
                    placeholderOption.setAttribute('data-placeholder', 'true');
                    employeesSelect.appendChild(placeholderOption);
                });
        }
    }

    function updatePositionsList() {
        const selectedDepartments = Array.from(departmentsSelect.selectedOptions).map(option => option.value);

        const currentSelected = Array.from(positionsSelect.selectedOptions).map(option => option.value);
        
        if (selectedDepartments.length === 0) {
            positionsSelect.innerHTML = '';
            const allPositions = @Html.Raw(Json.Serialize(Model.Employees.Where(e => !string.IsNullOrEmpty(e.PositionDescription)).OrderBy(e => e.PositionDescription).Select(e => e.PositionDescription).Distinct()));
            allPositions.forEach(position => {
                const option = document.createElement('option');
                option.value = position;
                option.textContent = position;
                if (currentSelected.includes(position)) {
                    option.selected = true;
                }
                positionsSelect.appendChild(option);
            });
        } else {
            const params = new URLSearchParams();
            selectedDepartments.forEach(id => params.append('departments', id));
            
            fetch(`/api/search?${params.toString()}`)
                .then(response => response.json())
                .then(data => {
                    if (data.employees && data.employees.length > 0) {
                        const availablePositions = [...new Set(data.employees
                            .map(emp => emp.positionDescription)
                            .filter(pos => pos && pos.trim() !== '' && pos.trim() !== '-')
                        )].sort();

                        positionsSelect.innerHTML = '';
                        
                        if (availablePositions.length > 0) {
                            availablePositions.forEach(position => {
                                const option = document.createElement('option');
                                option.value = position;
                                option.textContent = position;
                                if (currentSelected.includes(position)) {
                                    option.selected = true;
                                }
                                positionsSelect.appendChild(option);
                            });
                        } else {
                            const placeholderOption = document.createElement('option');
                            placeholderOption.value = '';
                            placeholderOption.textContent = 'Нет должностей в выбранных отделах';
                            placeholderOption.disabled = true;
                            placeholderOption.selected = false;
                            placeholderOption.style.color = '#6c757d';
                            placeholderOption.style.fontStyle = 'italic';
                            placeholderOption.style.backgroundColor = 'transparent';
                            placeholderOption.setAttribute('data-placeholder', 'true');
                            positionsSelect.appendChild(placeholderOption);
                        }
                    } else {
                        positionsSelect.innerHTML = '';
                    }
                })
                .catch(error => {
                    console.error('Ошибка при обновлении списка должностей:', error);

                    positionsSelect.innerHTML = '';
                    
                    const placeholderOption = document.createElement('option');
                    placeholderOption.value = '';
                    placeholderOption.textContent = 'Ошибка загрузки данных';
                    placeholderOption.disabled = true;
                    placeholderOption.selected = false;
                    placeholderOption.style.color = '#dc3545';
                    placeholderOption.style.fontStyle = 'italic';
                    placeholderOption.style.backgroundColor = 'rgba(220, 53, 69, 0.1)';
                    placeholderOption.setAttribute('data-placeholder', 'true');
                    positionsSelect.appendChild(placeholderOption);
                });
        }
    }

    function resetFilters() {
        searchInput.value = '';
        phoneSearchInput.value = '';
        positionSearchInput.value = '';
        emailSearchInput.value = '';
        if (departmentSearchInput) departmentSearchInput.value = '';
        
        Array.from(employeesSelect.options).forEach(option => option.selected = false);
        Array.from(departmentsSelect.options).forEach(option => option.selected = false);
        Array.from(positionsSelect.options).forEach(option => option.selected = false);

        departmentsPerPageSelect.value = '0';

        const paginationNav = document.getElementById('paginationNav');
        if (paginationNav) {
            paginationNav.style.display = 'none';
        }

        updateEmployeesList();
        updatePositionsList();
        performSearch();
    }

    searchInput.addEventListener('input', function() {
        clearTimeout(this.searchTimeout);
        this.searchTimeout = setTimeout(performSearch, 300);
    });

    phoneSearchInput.addEventListener('input', function() {
        clearTimeout(this.searchTimeout);
        this.searchTimeout = setTimeout(performSearch, 300);
    });

    positionSearchInput.addEventListener('input', function() {
        clearTimeout(this.searchTimeout);
        this.searchTimeout = setTimeout(performSearch, 300);
    });

    emailSearchInput.addEventListener('input', function() {
        clearTimeout(this.searchTimeout);
        this.searchTimeout = setTimeout(performSearch, 300);
    });

    if (departmentSearchInput) {
        departmentSearchInput.addEventListener('input', function() {
            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(() => {
                syncDepartmentFilter();
                updateEmployeesList();
                updatePositionsList();
                performSearch();
            }, 300);
        });
    }
    
    function syncDepartmentFilter() {
        const departmentSearch = departmentSearchInput ? departmentSearchInput.value.trim() : '';
        if (departmentSearch) {
            const matchingDepartments = Array.from(departmentsSelect.options).filter(option => 
                option.value && option.text.toLowerCase().includes(departmentSearch.toLowerCase())
            );
            
            Array.from(departmentsSelect.selectedOptions).forEach(option => {
                option.selected = false;
            });

            matchingDepartments.forEach(option => {
                option.selected = true;
            });
        }
    }

    employeesSelect.addEventListener('change', function() {
        Array.from(employeesSelect.selectedOptions).forEach(option => {
            if (option.hasAttribute('data-placeholder')) {
                option.selected = false;
            }
        });
        performSearch();
    });

    departmentsSelect.addEventListener('change', function() {
        updateEmployeesList();
        updatePositionsList();
        performSearch();
    });

    positionsSelect.addEventListener('change', function() {
        Array.from(positionsSelect.selectedOptions).forEach(option => {
            if (option.hasAttribute('data-placeholder')) {
                option.selected = false;
            }
        });
        performSearch();
    });

    departmentsPerPageSelect.addEventListener('change', function() {
        performSearch();
    });

    if (resetFiltersBtn) {
        resetFiltersBtn.addEventListener('click', resetFilters);
    }

    const printBtn = document.getElementById('printBtn');
    if (printBtn) {
        printBtn.addEventListener('click', function() {
            const search = document.getElementById('search')?.value || '';
            const phoneSearch = document.getElementById('phoneSearch')?.value || '';
            const departments = Array.from(document.getElementById('departments')?.selectedOptions || [])
                .map(option => option.value);
            const employees = Array.from(document.getElementById('employees')?.selectedOptions || [])
                .map(option => option.value);
            const positions = Array.from(document.getElementById('positions')?.selectedOptions || [])
                .map(option => option.value);
            const positionSearch = document.getElementById('positionSearch')?.value || '';
            const emailSearch = document.getElementById('emailSearch')?.value || '';
            const departmentSearch = document.getElementById('departmentSearch')?.value || '';
            const departmentsPerPage = document.getElementById('departmentsPerPage')?.value || '';
            
            const params = new URLSearchParams();
            if (search) params.append('search', search);
            if (phoneSearch) params.append('phoneSearch', phoneSearch);
            if (positionSearch) params.append('positionSearch', positionSearch);
            if (emailSearch) params.append('emailSearch', emailSearch);
            if (departmentSearch) params.append('departmentSearch', departmentSearch);
            departments.forEach(id => params.append('departmentIds', id));
            if (employees.length > 0) params.append('employeeNames', employees.join(','));
            if (positions.length > 0) params.append('positionNames', positions.join(','));
            if (departmentsPerPage) params.append('departmentsPerPage', departmentsPerPage);
            
            const url = '@Url.Page("/Print/PrintEmployees")' + (params.toString() ? '?' + params.toString() : '');
            window.open(url, '_blank');
        });
    }
});
</script>
