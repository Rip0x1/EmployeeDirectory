@page
@model IndexModel
@{
    ViewData["Title"] = "Справочник сотрудников";
}

<div class="container-fluid fade-in-up">
    <div class="row">
        <div class="col-12">
            @if (TempData["Success"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle me-2"></i>@TempData["Success"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }
            @if (TempData["Info"] != null)
            {
                <div class="alert alert-info alert-dismissible fade show" role="alert">
                    <i class="fas fa-info-circle me-2"></i>@TempData["Info"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }
            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-circle me-2"></i>@TempData["Error"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }
            
            <h1 class="mb-4">Справочник сотрудников</h1>
            
            <div class="search-filters-container">
                <div class="search-filters-header" style="display: flex; justify-content: space-between; align-items: center;">
                    <h6 style="margin: 0;"><i class="fas fa-search"></i>Поиск и фильтрация</h6>
                    <div class="expand-search-toggle">
                        <label for="expandSearch" class="expand-search-label">
                            <i class="fas fa-chevron-down expand-icon"></i>
                            <span>Расширенный</span>
                        </label>
                        <input type="checkbox" id="expandSearch" style="display: none;">
                    </div>
                </div>
                
                <div class="row g-3 mb-3 justify-content-center">
                    <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                        <div class="search-input-group">
                            <label for="search" class="form-label">
                                <i class="fas fa-search"></i>Поиск по ФИО
                            </label>
                            <input type="text" class="form-control" id="search" name="search" 
                                   value="@Model.SearchTerm" placeholder="Введите ФИО...">
                        </div>
                    </div>
                    <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                        <div class="search-input-group">
                            <label for="phoneSearch" class="form-label">
                                <i class="fas fa-phone"></i>Поиск по телефону
                            </label>
                            <input type="text" class="form-control" id="phoneSearch" name="phoneSearch" 
                                   placeholder="Городской или внутренний номер...">
                        </div>
                    </div>
                    <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                        <div class="search-input-group">
                            <label for="departmentSearch" class="form-label">
                                <i class="fas fa-building"></i>Поиск по отделу
                            </label>
                            <input type="text" class="form-control" id="departmentSearch" placeholder="Введите название отдела" />
                        </div>
                    </div>
                </div>
                
                <div id="advancedSearch" style="display: none; border-top: 2px solid rgba(86, 171, 47, 0.2); padding-top: 20px; margin-top: 10px;">
                    <div class="row g-3 mb-3 justify-content-center">
                        <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                            <div class="search-input-group">
                                <label for="positionSearch" class="form-label">
                                    <i class="fas fa-user-tie"></i>Поиск по должности
                                </label>
                                <input type="text" class="form-control" id="positionSearch" name="positionSearch" 
                                       placeholder="Введите должность...">
                            </div>
                        </div>
                        <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                            <div class="search-input-group">
                                <label for="emailSearch" class="form-label">
                                    <i class="fas fa-envelope"></i>Поиск по Email
                                </label>
                                <input type="text" class="form-control" id="emailSearch" name="emailSearch" 
                                       placeholder="Введите email...">
                            </div>
                        </div>
                    </div>
                    
                    <div class="row g-3 mb-3 justify-content-center">
                        <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                            <div class="search-input-group">
                                <label for="departmentFullNameSearch" class="form-label">
                                    <i class="fas fa-building"></i>Поиск по полному названию отдела
                                </label>
                                <input type="text" class="form-control" id="departmentFullNameSearch" name="departmentFullNameSearch" 
                                       placeholder="Введите полное название...">
                            </div>
                        </div>
                        <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                            <div class="search-input-group">
                                <label for="departmentShortNameSearch" class="form-label">
                                    <i class="fas fa-building"></i>Поиск по сокращенному названию отдела
                                </label>
                                <input type="text" class="form-control" id="departmentShortNameSearch" name="departmentShortNameSearch" 
                                       placeholder="Введите сокращенное название...">
                            </div>
                        </div>
                    </div>
                    
                    <div class="row g-3 mb-3 justify-content-center">
                        <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                            <div class="search-select-group">
                                <label for="employees" class="form-label">
                                    <i class="fas fa-users"></i>ФИО
                                </label>
                                <select class="form-select" id="employees" name="employees" multiple size="3">
                                    @if (Model.Employees.Where(e => !string.IsNullOrEmpty(e.FullName)).Any())
                                    {
                                        @foreach (var employee in Model.Employees.Where(e => !string.IsNullOrEmpty(e.FullName)).Select(e => e.FullName).Distinct().OrderBy(e => e))
                                        {
                                            <option value="@employee">@employee</option>
                                        }
                                    }
                                    else
                                    {
                                        <option disabled>Нет доступных сотрудников</option>
                                    }
                                </select>
                                <div class="search-help-text">Удерживайте Ctrl для выбора нескольких</div>
                            </div>
                        </div>
                        <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                            <div class="search-select-group">
                                <label for="departments" class="form-label">
                                    <i class="fas fa-building"></i>Отделы
                                </label>
                                <select class="form-select" id="departments" name="departments" multiple size="3">
                                    @if (Model.Departments.Any())
                                    {
                                        @foreach (var dept in Model.Departments)
                                        {
                                            <option value="@dept.Id" data-fullname="@(dept.FullName ?? "")" data-shortname="@(dept.ShortName ?? "")">@dept.GetDisplayName()</option>
                                        }
                                    }
                                    else
                                    {
                                        <option disabled>Нет доступных отделов</option>
                                    }
                                </select>
                                <div class="search-help-text">Удерживайте Ctrl для выбора нескольких</div>
                            </div>
                        </div>
                        <div class="col-12 col-sm-6 col-md-4 col-lg-4">
                            <div class="search-select-group">
                                <label for="positions" class="form-label">
                                    <i class="fas fa-user-tie"></i>Должности
                                </label>
                                <select class="form-select" id="positions" name="positions" multiple size="3">
                                    @if (Model.Employees.Select(e => !string.IsNullOrEmpty(e.PositionDescription) ? e.PositionDescription : e.Position?.Name).Where(p => !string.IsNullOrEmpty(p)).Any())
                                    {
                                        @foreach (var position in Model.Employees.Select(e => !string.IsNullOrEmpty(e.PositionDescription) ? e.PositionDescription : e.Position?.Name).Where(p => !string.IsNullOrEmpty(p)).Distinct().OrderBy(p => p))
                                        {
                                            <option value="@position">@position</option>
                                        }
                                    }
                                    else
                                    {
                                        <option disabled>Нет доступных должностей</option>
                                    }
                                </select>
                                <div class="search-help-text">Удерживайте Ctrl для выбора нескольких</div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="search-actions">
                    <button type="button" id="resetFiltersBtn" class="btn btn-outline-danger w-100">
                        <i class="fas fa-times"></i>Сброс фильтров
                    </button>
                </div>
            </div>
           
            <div class="search-results-header">
                <div class="d-flex flex-wrap justify-content-between align-items-center gap-2">
                    <h5><i class="fas fa-users"></i>Список сотрудников <span class="badge">@Model.Employees.Count()</span></h5>
                    <div class="d-flex flex-wrap align-items-center gap-2">
                        <select class="form-select" id="departmentsPerPage" style="width: auto; background: rgba(255,255,255,0.2); border: 1px solid rgba(255,255,255,0.3); color: white;">
                            <option value="1" style="color: #333; background: white;">1 отдел</option>
                            <option value="2" style="color: #333; background: white;">2 отдела</option>
                            <option value="3" style="color: #333; background: white;">3 отдела</option>
                            <option value="4" style="color: #333; background: white;">4 отдела</option>
                            <option value="5" style="color: #333; background: white;">5 отделов</option>
                            <option value="0" selected style="color: #333; background: white;">Все отделы</option>
                        </select>
                        <button type="button" id="printBtn" class="btn" style="background: rgba(255,255,255,0.2); border: 1px solid rgba(255,255,255,0.3); color: white;" data-bs-toggle="modal" data-bs-target="#printSettingsModal" data-print-url="/Pdf/EmployeeDirectory">
                            <i class="fas fa-print"></i> Печать
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="card">
                <div class="card-body p-0">
                    <div id="employeesTable">
                        @{
                            var groupedEmployees = Model.Employees.GroupBy(e => e.Department?.GetDisplayName() ?? e.Department?.Name ?? "Неизвестный отдел").OrderBy(g => g.Key);
                        }
                        @foreach (var departmentGroup in groupedEmployees)
                        {
                            <div class="department-section">
                                <div class="department-header">
                                    <span class="department-name-badge">@departmentGroup.Key</span>
                                </div>

                                <table class="table mb-0">
                                    <thead class="table-dark sticky-header">
                                        <tr>
                                            <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 40%;">Должность / ФИО</th>
                                            <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 20%;">Городской номер</th>
                                            <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 20%;">Внутренний номер</th>
                                            <th class="text-center" style="border-bottom: 2px solid rgb(33, 37, 41) !important; width: 20%;">Email</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var employee in departmentGroup.OrderByDescending(e => e.IsHeadOfDepartment).ThenByDescending(e => e.IsDeputy).ThenBy(e => e.FullName))
                                        {
                                            <tr>
                                                <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">
                                                    @{
                                                        var positionText = !string.IsNullOrEmpty(employee.PositionDescription) 
                                                        ? employee.PositionDescription 
                                                        : employee.Position?.Name;
                                                    }
                                                    @if (!string.IsNullOrEmpty(positionText))
                                                    {
                                                        var badgeClass = "position-employee";
                                                        if (employee.IsHeadOfDepartment)
                                                        {
                                                            badgeClass = "position-head";
                                                        }
                                                        else if (employee.IsDeputy)
                                                        {
                                                            badgeClass = "position-deputy";
                                                        }
                                                        <span class="position-badge @badgeClass">
                                                            @positionText
                                                        </span>
                                                        @if (!string.IsNullOrEmpty(employee.FullName))
                                                        {
                                                            <strong>@employee.FullName</strong>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted fst-italic">-</span>
                                                    }
                                                </td>
                                                <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">
                                                    @(employee.CityPhone ?? "Не указано")
                                                </td>
                                                <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">
                                                    @(employee.LocalPhone ?? "Не указано")
                                                </td>
                                                <td class="text-center">
                                                    @(employee.Email ?? "Не указано")
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        @if (!Model.Employees.Any())
                        {
                            <div class="text-center text-muted py-4">Сотрудники не найдены</div>
                        }
                    </div>
                </div>
            </div>

            @if (Model.TotalPages > 1)
            {
                <nav id="paginationNav" aria-label="Навигация по страницам" class="mt-4">
                    <ul class="pagination justify-content-center flex-wrap">
                        @if (Model.PageNumber > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="?search=@Model.SearchTerm&departmentId=@Model.SelectedDepartmentId&pageNumber=@(Model.PageNumber - 1)&departmentsPerPage=@Model.DepartmentsPerPage">
                                    <i class="fas fa-chevron-left me-1"></i>Предыдущая
                                </a>
                            </li>
                        }
                        
                        @for (int i = Math.Max(1, Model.PageNumber - 2); i <= Math.Min(Model.TotalPages, Model.PageNumber + 2); i++)
                        {
                            <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                                <a class="page-link" href="?search=@Model.SearchTerm&departmentId=@Model.SelectedDepartmentId&pageNumber=@i&departmentsPerPage=@Model.DepartmentsPerPage">@i</a>
                            </li>
                        }
                        
                        @if (Model.PageNumber < Model.TotalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="?search=@Model.SearchTerm&departmentId=@Model.SelectedDepartmentId&pageNumber=@(Model.PageNumber + 1)&departmentsPerPage=@Model.DepartmentsPerPage">
                                    Следующая<i class="fas fa-chevron-right ms-1"></i>
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
                
                <div class="text-center text-muted small mt-2">
                    <div class="d-block d-md-inline">Страница @Model.PageNumber из @Model.TotalPages</div>
                    <div class="d-block d-md-inline ms-md-2">Показано @Model.Employees.Count() сотрудников из @Model.TotalEmployees</div>
                </div>
            }
        </div>
    </div>
</div>

<style media="print">
    .card-header, .btn, .form-control, .form-select {
        display: none !important;
    }
    
    .table {
        font-size: 12px;
    }
    
    .table th, .table td {
        padding: 4px 8px;
    }
    
    h1 {
        text-align: center;
        margin-bottom: 20px;
    }
    
    .table-responsive {
        overflow: visible;
    }
    
    .department-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        font-weight: bold;
        font-size: 1.1em;
        padding: 12px;
        text-align: center;
    }
    
    .position-badge {
        font-size: 0.9em;
        padding: 8px 12px;
        border-radius: 20px;
        font-weight: 500;
    }
    
    .position-badge.manager {
        background: linear-gradient(45deg, #ffc107, #ff8c00);
        color: #000;
        font-weight: bold;
    }
    
    .position-badge.employee {
        background: linear-gradient(45deg, #007bff, #0056b3);
        color: white;
    }
    
    .table tbody tr {
        border-bottom: 1px solid #e9ecef;
    }
    
    .position-badge {
        width: 180px;
        height: 32px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        font-size: 0.9em;
        padding: 6px 12px;
        border-radius: 6px;
    }
    
    .table-container {
        height: 70vh;
        overflow-y: auto;
        position: relative;
        border: 1px solid #dee2e6;
    }
    
    
    
    .table {
        margin-bottom: 0;
        border-collapse: separate;
        border-spacing: 0;
        width: 100%;
        table-layout: fixed;
    }
    
    .table thead th {
        position: sticky;
        top: 0;
        z-index: 100;
        background-color: #343a40 !important;
        color: white !important;
        border: 1px solid #dee2e6 !important;
        border-bottom: 2px solid #212529 !important;
        padding: 12px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        text-align: center !important;
    }
    
    .table td, .table th {
        word-wrap: break-word;
        word-break: break-word;
        white-space: normal;
        overflow-wrap: break-word;
    }
    
    .table th {
        text-align: center !important;
    }
    
    .table thead th,
    .table th {
        text-align: center !important;
        vertical-align: middle !important;
    }
    
    .table th,
    .table td {
        border-right: 3px solid #212529 !important;
        border-left: 1px solid #dee2e6 !important;
        vertical-align: middle;
    }
    
    .table th:last-child,
    .table td:last-child {
        border-right: none !important;
    }
    
    .table th:first-child,
    .table td:first-child {
        border-left: none !important;
    }
    
    .table th:not(:last-child),
    .table td:not(:last-child) {
        border-right: 3px solid #212529 !important;
    }
    
    .table {
        border-collapse: separate !important;
        border-spacing: 0 !important;
    }
    
    .table th,
    .table td {
        border-top: 1px solid #dee2e6;
        border-bottom: 1px solid #dee2e6;
    }
    
    .table th {
        background-color: #343a40 !important;
        color: white !important;
        font-weight: bold;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        border: 2px solid #495057 !important;
    }
    
    .table td {
        padding: 8px 12px;
    }
    
    .table th,
    .table td {
        border: 1px solid #dee2e6 !important;
        border-right: 3px solid #212529 !important;
    }
    
    .table th:last-child,
    .table td:last-child {
        border-right: 1px solid #dee2e6 !important;
    }
    
    .table tbody tr {
        border-bottom: 1px solid #dee2e6;
    }
    
    .table tbody tr:hover {
        background-color: #f8f9fa;
    }
    
    .table td:nth-child(1), .table th:nth-child(1) {
        width: 20%;
    }
    
    .table td:nth-child(2), .table th:nth-child(2) {
        width: 40%;
    }
    
    .table td:nth-child(3), .table th:nth-child(3) {
        width: 20%;
    }
    
    .table td:nth-child(4), .table th:nth-child(4) {
        width: 20%;
    }
    
    .table td:nth-child(5), .table th:nth-child(5) {
        width: 15%;
    }
    
    .btn-group .btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.8em;
    }
    
    .table tbody tr:nth-child(even) {
        background-color: #f8f9fa;
    }
    
    .table tbody tr:nth-child(odd) {
        background-color: white;
    }
    
    .department-header {
        color: white;
        font-size: 1.1em;
        border: none;
    }
    
    .department-header td {
        color: white;
        border: none;
        padding: 12px;
    }
    
    @@media (max-width: 768px) {
        .table-container {
            height: auto !important;
            max-height: 60vh;
        }
        
        .table th, .table td {
            padding: 8px 4px;
            font-size: 0.9em;
        }
        
        .position-badge {
            font-size: 0.8em;
            padding: 4px 8px;
        }
        
        .card-header h5 {
            font-size: 1.1em;
        }
        
        .form-label {
            font-size: 0.9em;
        }
        
        .btn {
            font-size: 0.9em;
        }
        
        .pagination {
            font-size: 0.9em;
        }
        
        .pagination .page-link {
            padding: 0.5rem 0.75rem;
        }
    }
    
    @@media (max-width: 576px) {
        .table th, .table td {
            padding: 6px 2px;
            font-size: 0.8em;
        }
        
        .position-badge {
            font-size: 0.7em;
            padding: 3px 6px;
        }
        
        .card-header h5 {
            font-size: 1em;
        }
        
        .form-label {
            font-size: 0.8em;
        }
        
        .btn {
            font-size: 0.8em;
            padding: 0.5rem 0.75rem;
        }
        
        .pagination .page-link {
            padding: 0.375rem 0.5rem;
            font-size: 0.8em;
        }
        
        .navbar-nav .nav-link {
            padding: 0.5rem 0.75rem;
        }
    }
    
    @@media (max-width: 992px) {
        .table th, .table td {
            padding: 6px 3px;
            font-size: 0.85em;
        }
        
        .position-badge {
            font-size: 0.75em;
            padding: 4px 8px;
            width: 150px;
        }
        
        .table-container {
            max-height: 65vh;
            overflow-y: auto;
        }
    }
    
    @@media (max-width: 768px) {
        .container-fluid {
            padding: 0.25rem;
        }
        
        .card {
            margin-bottom: 0.5rem;
        }
        
        .card-body {
            padding: 0.5rem;
        }
        
        .table th, .table td {
            padding: 4px 2px;
            font-size: 0.8em;
            line-height: 1.2;
        }
        
        .position-badge {
            font-size: 0.7em;
            padding: 3px 6px;
            width: 120px;
        }
        
        .department-header td {
            padding: 8px 4px;
            font-size: 0.9em;
        }
        
        .form-label {
            font-size: 0.8em;
            margin-bottom: 0.25rem;
        }
        
        .form-control, .form-select {
            font-size: 0.9em;
            padding: 0.375rem 0.5rem;
        }
        
        .btn {
            font-size: 0.8em;
            padding: 0.375rem 0.5rem;
        }
        
        .card-header h5, .card-header h6 {
            font-size: 0.9em;
        }
        
        .pagination .page-link {
            padding: 0.375rem 0.5rem;
            font-size: 0.8em;
        }
        
        .navbar-brand {
            font-size: 0.9em;
        }
        
        .navbar-nav .nav-link {
            padding: 0.5rem 0.75rem;
            font-size: 0.8em;
        }
        
        .table-container {
            max-height: 60vh;
            overflow-y: auto;
        }
        
        .table th:nth-child(1),
        .table td:nth-child(1) {
            width: 25%;
        }
        
        .table th:nth-child(2),
        .table td:nth-child(2) {
            width: 35%;
        }
        
        .table th:nth-child(3),
        .table td:nth-child(3) {
            width: 20%;
        }
        
        .table th:nth-child(4),
        .table td:nth-child(4) {
            width: 20%;
        }
        
        .table th:nth-child(5),
        .table td:nth-child(5) {
            width: 15%;
        }
    }
    
    @@media (max-width: 480px) {
        .table th, .table td {
            padding: 3px 1px;
            font-size: 0.75em;
        }
        
        .position-badge {
            font-size: 0.65em;
            padding: 2px 4px;
            width: 100px;
        }
        
        .table-container {
            max-height: 55vh;
        }
        
        .table th:nth-child(1),
        .table td:nth-child(1) {
            width: 20%;
        }
        
        .table th:nth-child(2),
        .table td:nth-child(2) {
            width: 30%;
        }
        
        .table th:nth-child(3),
        .table td:nth-child(3) {
            width: 25%;
        }
        
        .table th:nth-child(4),
        .table td:nth-child(4) {
            width: 25%;
        }
        
        .table th:nth-child(5),
        .table td:nth-child(5) {
            width: 15%;
        }
    }

    @@media (max-width: 360px) {
        .table th, .table td {
            padding: 2px 1px;
            font-size: 0.7em;
        }
        
        .position-badge {
            font-size: 0.6em;
            padding: 1px 3px;
            width: 80px;
        }
        
        .table-container {
            max-height: 50vh;
        }

        .table th:nth-child(1),
        .table td:nth-child(1) {
            width: 18%;
        }
        
        .table th:nth-child(2),
        .table td:nth-child(2) {
            width: 28%;
        }
        
        .table th:nth-child(3),
        .table td:nth-child(3) {
            width: 27%;
        }
        
        .table th:nth-child(4),
        .table td:nth-child(4) {
            width: 27%;
        }
        
        .table th:nth-child(5),
        .table td:nth-child(5) {
            width: 15%;
        }
    }
    
</style>

<style>
    .department-section {
        margin-bottom: 20px;
    }
    
    .department-header {
        background: none !important;
        text-align: center;
        padding: 10px 0;
    }
    
    .department-name-badge {
        display: inline-block;
        background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 50%, #11998e 100%);
        color: #000;
        padding: 6px 12px;
        border-radius: 15px;
        font-weight: bold;
        font-size: 0.9em;
        border: 2px solid rgba(0, 0, 0, 0.1);
        box-shadow: 0 2px 6px rgba(86, 171, 47, 0.2);
        text-align: center;
        margin: 0 auto;
        width: fit-content;
        min-width: 80px;
    }
    
    .employees-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
    }
    
    .employees-table th {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
    padding: 8px;
    text-align: center;
    vertical-align: middle;
    font-weight: bold;
    }
    
.employees-table td {
    border: 1px solid #dee2e6;
    padding: 8px;
    text-align: center;
    vertical-align: middle;
}
    
    .employee-name {
        font-weight: 500;
    }
    
    .phone-number {
        text-align: center;
    }
    
    .position-badge {
        display: inline-block;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.8em;
        font-weight: bold;
        margin-right: 8px;
    }
    
    .position-head {
        background: linear-gradient(45deg, #ffc107, #e0a800);
        color: #000;
    }
    
    .position-deputy {
        background: linear-gradient(45deg, #9c27b0, #7b1fa2);
        color: white;
    }
    
    .position-employee {
        background: linear-gradient(45deg, #007bff, #0056b3);
        color: white;
    }
    
    .expand-search-toggle {
        display: flex;
        align-items: center;
    }
    
    .expand-search-label {
        display: inline-flex;
        align-items: center;
        gap: 5px;
        padding: 5px 12px;
        background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 50%, #11998e 100%);
        color: #000;
        border-radius: 15px;
        font-weight: 600;
        font-size: 0.85rem;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 2px 8px rgba(86, 171, 47, 0.2);
        border: 2px solid rgba(0, 0, 0, 0.1);
    }
    
    .expand-search-label:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(86, 171, 47, 0.3);
    }
    
    .expand-search-label .expand-icon {
        transition: transform 0.3s ease;
    }
    
    #expandSearch:checked ~ .expand-search-label .expand-icon {
        transform: rotate(180deg);
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const expandSearchCheckbox = document.getElementById('expandSearch');
    const advancedSearch = document.getElementById('advancedSearch');
    const expandLabel = document.querySelector('.expand-search-label');
    
    expandLabel.addEventListener('click', function(e) {
        e.preventDefault();
        expandSearchCheckbox.checked = !expandSearchCheckbox.checked;
        
        if (expandSearchCheckbox.checked) {
            advancedSearch.style.display = 'block';
        } else {
            advancedSearch.style.display = 'none';
        }
    });
    
    const searchInput = document.getElementById('search');
    const employeesSelect = document.getElementById('employees');
    const departmentsSelect = document.getElementById('departments');
    const positionsSelect = document.getElementById('positions');
    const departmentsPerPageSelect = document.getElementById('departmentsPerPage');
    const phoneSearchInput = document.getElementById('phoneSearch');
    const positionSearchInput = document.getElementById('positionSearch');
    const emailSearchInput = document.getElementById('emailSearch');
    const departmentSearchInput = document.getElementById('departmentSearch');
    const departmentFullNameSearchInput = document.getElementById('departmentFullNameSearch');
    const departmentShortNameSearchInput = document.getElementById('departmentShortNameSearch');
    const tbody = document.getElementById('employeesTable');
    
    let typingTimer;
    
    function performSearch() {
        const searchTerm = searchInput.value;
        const selectedEmployees = Array.from(employeesSelect.selectedOptions).map(option => option.value);
        const selectedDepartments = Array.from(departmentsSelect.selectedOptions).map(option => option.value);
        const selectedPositions = Array.from(positionsSelect.selectedOptions).map(option => option.value);
        const departmentsPerPage = departmentsPerPageSelect.value;
        const phoneSearch = phoneSearchInput.value;
        const positionSearch = positionSearchInput.value;
        const emailSearch = emailSearchInput.value;
        const departmentSearch = departmentSearchInput ? departmentSearchInput.value.trim() : '';
        const departmentFullNameSearch = departmentFullNameSearchInput ? departmentFullNameSearchInput.value.trim() : '';
        const departmentShortNameSearch = departmentShortNameSearchInput ? departmentShortNameSearchInput.value.trim() : '';

        tbody.innerHTML = `<div class="text-center p-4"><div class="spinner-border" role="status"><span class="visually-hidden">Загрузка...</span></div></div>`;

        const params = new URLSearchParams();
        if (searchTerm) params.append('search', searchTerm);
        selectedEmployees.forEach(emp => params.append('selectedEmployees', emp));
        selectedDepartments.forEach(id => params.append('departments', id));
        selectedPositions.forEach(pos => params.append('positions', pos));
        if (departmentsPerPage) params.append('departmentsPerPage', departmentsPerPage);
        if (phoneSearch) params.append('phoneSearch', phoneSearch);
        if (positionSearch) params.append('positionSearch', positionSearch);
        if (emailSearch) params.append('emailSearch', emailSearch);
        if (departmentSearch) {
            params.append('departmentSearch', departmentSearch);
        }
        if (departmentFullNameSearch) {
            params.append('departmentFullNameSearch', departmentFullNameSearch);
        }
        if (departmentShortNameSearch) {
            params.append('departmentShortNameSearch', departmentShortNameSearch);
        }

        fetch(`/api/search?${params.toString()}`)
            .then(response => response.json())
            .then(data => {
                if (data.employees && data.employees.length > 0) {
                    const grouped = data.employees.reduce((groups, emp) => {
                        const dept = emp.departmentName;
                        if (!groups[dept]) groups[dept] = [];
                        groups[dept].push(emp);
                        return groups;
                    }, {});
                    
                    let html = '';
                    const deptNames = Object.keys(grouped).sort();
                    const maxDepartments = departmentsPerPage === '0' ? deptNames.length : parseInt(departmentsPerPage);
                    const departmentsToShow = deptNames.slice(0, maxDepartments);
                    
                    departmentsToShow.forEach(deptName => {
                        html += `
                            <div class="department-section">
                                <div class="department-header">
                                    <span class="department-name-badge">${deptName}</span>
                                </div>

                                <table class="table mb-0">
                                    <thead class="table-dark sticky-header">
                                        <tr>
                                            <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 40%;">Должность / ФИО</th>
                                            <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 20%;">Городской номер</th>
                                            <th class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important; border-bottom: 2px solid rgb(33, 37, 41) !important; width: 20%;">Внутренний номер</th>
                                            <th class="text-center" style="border-bottom: 2px solid rgb(33, 37, 41) !important; width: 20%;">Email</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                        `;
                        
                        grouped[deptName].forEach(emp => {
                            let positionBadge = '';
                            if (emp.positionDescription) {
                                let badgeClass = 'position-employee';
                                if (emp.isHeadOfDepartment) {
                                    badgeClass = 'position-head';
                                } else if (emp.isDeputy) {
                                    badgeClass = 'position-deputy';
                                }
                                
                                positionBadge = `<span class="position-badge ${badgeClass}">${emp.positionDescription}</span>`;
                                if (emp.fullName && emp.fullName !== '-') {
                                    positionBadge += ` <strong>${emp.fullName}</strong>`;
                                }
                            } else {
                                positionBadge = '<span class="text-muted fst-italic">-</span>';
                            }
                            
                            html += `
                                <tr>
                                    <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">
                                        ${positionBadge}
                                    </td>
                                    <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">
                                        ${emp.cityPhone || 'Не указано'}
                                    </td>
                                    <td class="text-center" style="border-right: 3px solid rgb(33, 37, 41) !important;">
                                        ${emp.localPhone || 'Не указано'}
                                    </td>
                                    <td class="text-center">
                                        ${emp.email || 'Не указано'}
                                    </td>
                                </tr>
                            `;
                        });
                        
                        html += `
                                    </tbody>
                                </table>
                            </div>
                        `;
                    });
                    
                    tbody.innerHTML = html;
                    
                    const totalEmployees = departmentsToShow.reduce((total, deptName) => {
                        return total + (grouped[deptName] ? grouped[deptName].length : 0);
                    }, 0);
                    
                    const badgeElement = document.querySelector('.search-results-header .badge');
                    if (badgeElement) {
                        badgeElement.textContent = totalEmployees;
                    }
                    
                    const headerElement = document.querySelector('.card-header h5');
                    if (headerElement) {
                        headerElement.textContent = `Список сотрудников (${totalEmployees})`;
                    }
                    
                    const paginationNav = document.getElementById('paginationNav');
                    if (paginationNav) {
                        if (departmentsPerPage === '0') {
                            paginationNav.style.display = 'none';
                        } else {
                            paginationNav.style.display = paginationNav.children.length > 0 ? 'block' : 'none';
                        }
                    }
                    
                    } else {
                        tbody.innerHTML = `
                            <div class="card">
                                <div class="card-body p-0">
                                    <div class="card-body p-0">
                                        <div id="employeesTable">
                                            <div class="text-center text-muted py-4">Сотрудники не найдены</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `;
                        
                        const badgeElement = document.querySelector('.search-results-header .badge');
                        if (badgeElement) {
                            badgeElement.textContent = '0';
                        }
                        
                        const headerElement = document.querySelector('.card-header h5');
                        if (headerElement) {
                            headerElement.textContent = 'Список сотрудников (0)';
                        }
                    }
            })
            .catch(error => {
                console.error('Ошибка поиска:', error);
                tbody.innerHTML = `
                    <div class="card">
                        <div class="card-body p-0">
                            <div class="card-body p-0">
                                <div id="employeesTable">
                                    <div class="text-center text-danger py-4">Ошибка при выполнении поиска</div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                const badgeElement = document.querySelector('.search-results-header .badge');
                if (badgeElement) {
                    badgeElement.textContent = '0';
                }
                
                const headerElement = document.querySelector('.card-header h5');
                if (headerElement) {
                    headerElement.textContent = 'Список сотрудников (0)';
                }
            });
    }

    searchInput.addEventListener('input', function() {
        clearTimeout(this.searchTimeout);
        this.searchTimeout = setTimeout(() => {
            performSearch();
        }, 300);
    });

    phoneSearchInput.addEventListener('input', function() {
        clearTimeout(this.searchTimeout);
        this.searchTimeout = setTimeout(() => {
            performSearch();
        }, 300);
    });

    function updatePositionsList() {
        const selectedDepartments = Array.from(departmentsSelect.selectedOptions).map(option => option.value);
        
        if (selectedDepartments.length === 0) {
            positionsSelect.innerHTML = '';
            const allPositions = @Html.Raw(Json.Serialize(Model.Employees.Where(e => !string.IsNullOrEmpty(e.PositionDescription)).OrderBy(e => e.PositionDescription).Select(e => e.PositionDescription).Distinct()));
            if (allPositions && allPositions.length > 0) {
                allPositions.forEach(position => {
                    const option = document.createElement('option');
                    option.value = position;
                    option.textContent = position;
                    positionsSelect.appendChild(option);
                });
            } else {
                const placeholderOption = document.createElement('option');
                placeholderOption.disabled = true;
                placeholderOption.textContent = 'Нет доступных должностей';
                positionsSelect.appendChild(placeholderOption);
            }
        } else {
            const params = new URLSearchParams();
            selectedDepartments.forEach(id => params.append('departments', id));
            
            fetch(`/api/search?${params.toString()}`)
                .then(response => response.json())
                .then(data => {
                    if (data.employees && data.employees.length > 0) {
                        const allPositions = data.employees.map(emp => emp.positionDescription);
                        const availablePositions = [...new Set(data.employees
                            .map(emp => emp.positionDescription)
                            .filter(pos => pos && pos.trim() !== '' && pos.trim() !== '-')
                        )].sort();
                            
                        positionsSelect.innerHTML = '';
                        
                        if (availablePositions.length > 0) {
                            availablePositions.forEach(position => {
                                const option = document.createElement('option');
                                option.value = position;
                                option.textContent = position;
                                positionsSelect.appendChild(option);
                            });
                        } else {
                            const placeholderOption = document.createElement('option');
                            placeholderOption.value = '';
                            placeholderOption.textContent = 'Нет должностей в выбранных отделах';
                            placeholderOption.disabled = true;
                            placeholderOption.selected = false;
                            placeholderOption.style.color = '#6c757d';
                            placeholderOption.style.fontStyle = 'italic';
                            placeholderOption.style.backgroundColor = 'transparent';
                            placeholderOption.setAttribute('data-placeholder', 'true');
                            positionsSelect.appendChild(placeholderOption);
                        }
                        const hasAny = availablePositions.length > 0;
                        
                        updateEmployeeCounter();
                    } else {
                        positionsSelect.innerHTML = '';
                        
                        const placeholderOption = document.createElement('option');
                        placeholderOption.value = '';
                        placeholderOption.textContent = 'Нет доступных должностей';
                        placeholderOption.disabled = true;
                        placeholderOption.selected = false;
                        placeholderOption.setAttribute('data-placeholder', 'true');
                        positionsSelect.appendChild(placeholderOption);
                    }
                })
                .catch(error => {
                    console.error('Ошибка при обновлении списка должностей:', error);
                    
                    positionsSelect.innerHTML = '';
                    
                    const placeholderOption = document.createElement('option');
                    placeholderOption.value = '';
                    placeholderOption.textContent = 'Нет доступных должностей';
                    placeholderOption.disabled = true;
                    placeholderOption.selected = false;
                    placeholderOption.setAttribute('data-placeholder', 'true');
                    positionsSelect.appendChild(placeholderOption);
                });
        }
    }

    function updateEmployeesList() {
        const selectedDepartments = Array.from(departmentsSelect.selectedOptions).map(option => option.value);
        
        if (selectedDepartments.length === 0) {
            employeesSelect.innerHTML = '';
            const allEmployees = @Html.Raw(Json.Serialize(Model.Employees.Where(e => !string.IsNullOrEmpty(e.FullName)).OrderBy(e => e.FullName).Select(e => e.FullName)));
            if (allEmployees && allEmployees.length > 0) {
                allEmployees.forEach(employee => {
                    const option = document.createElement('option');
                    option.value = employee;
                    option.textContent = employee;
                    employeesSelect.appendChild(option);
                });
            } else {
                const placeholderOption = document.createElement('option');
                placeholderOption.disabled = true;
                placeholderOption.textContent = 'Нет доступных сотрудников';
                employeesSelect.appendChild(placeholderOption);
            }
        } else {
            const params = new URLSearchParams();
            selectedDepartments.forEach(id => params.append('departments', id));
            
            fetch(`/api/search?${params.toString()}`)
                .then(response => response.json())
                .then(data => {
                    if (data.employees && data.employees.length > 0) {
                        const allEmployees = data.employees.map(emp => emp.fullName);
                        const availableEmployees = [...new Set(data.employees
                            .map(emp => emp.fullName)
                            .filter(name => name && name.trim() !== '' && name.trim() !== '-')
                        )].sort();
                        
                        employeesSelect.innerHTML = '';
                        
                        if (availableEmployees.length > 0) {
                            availableEmployees.forEach(employee => {
                                const option = document.createElement('option');
                                option.value = employee;
                                option.textContent = employee;
                                employeesSelect.appendChild(option);
                            });
                        } else {
                            const placeholderOption = document.createElement('option');
                            placeholderOption.value = '';
                            placeholderOption.textContent = 'Нет сотрудников с ФИО в выбранных отделах';
                            placeholderOption.disabled = true;
                            placeholderOption.selected = false;
                            placeholderOption.style.color = '#6c757d';
                            placeholderOption.style.fontStyle = 'italic';
                            placeholderOption.style.backgroundColor = 'transparent';
                            placeholderOption.setAttribute('data-placeholder', 'true');
                            employeesSelect.appendChild(placeholderOption);
                        }
                        const hasAny = availableEmployees.length > 0;
                        
                        updateEmployeeCounter();
                    } else {
                        employeesSelect.innerHTML = '';
                        
                        const placeholderOption = document.createElement('option');
                        placeholderOption.value = '';
                        placeholderOption.textContent = 'Нет доступных сотрудников';
                        placeholderOption.disabled = true;
                        placeholderOption.selected = false;
                        placeholderOption.setAttribute('data-placeholder', 'true');
                        employeesSelect.appendChild(placeholderOption);
                    }
                })
                .catch(error => {
                    console.error('Ошибка при обновлении списка сотрудников:', error);
                    
                    employeesSelect.innerHTML = '';
                    
                    const placeholderOption = document.createElement('option');
                    placeholderOption.value = '';
                    placeholderOption.textContent = 'Нет доступных сотрудников';
                    placeholderOption.disabled = true;
                    placeholderOption.selected = false;
                    placeholderOption.setAttribute('data-placeholder', 'true');
                    employeesSelect.appendChild(placeholderOption);
                });
        }
    }

    employeesSelect.addEventListener('change', function() {
        Array.from(employeesSelect.selectedOptions).forEach(option => {
            if (option.hasAttribute('data-placeholder')) {
                option.selected = false;
            }
        });
        performSearch();
    });
    departmentsSelect.addEventListener('change', function() {
        updateEmployeesList();
        updatePositionsList();
        performSearch();
    });
    positionsSelect.addEventListener('change', function() {
        Array.from(positionsSelect.selectedOptions).forEach(option => {
            if (option.hasAttribute('data-placeholder')) {
                option.selected = false;
            }
        });
        performSearch();
    });
        departmentsPerPageSelect.addEventListener('change', function() {
            const selectedValue = this.value;
            if (selectedValue === '0') {
                updateEmployeesList();
                updatePositionsList();
                performSearch();
            } else {
                const currentUrl = new URL(window.location);
                currentUrl.searchParams.set('departmentsPerPage', selectedValue);
                currentUrl.searchParams.delete('pageNumber'); 
                window.location.href = currentUrl.toString();
            }
        });
    positionSearchInput.addEventListener('input', function() {
        clearTimeout(this.searchTimeout);
        this.searchTimeout = setTimeout(() => {
            performSearch();
        }, 300);
    });
    
    emailSearchInput.addEventListener('input', function() {
        clearTimeout(this.searchTimeout);
        this.searchTimeout = setTimeout(() => {
            performSearch();
        }, 300);
    });
    if (departmentSearchInput) {
        departmentSearchInput.addEventListener('input', function () {
            clearTimeout(typingTimer);
            typingTimer = setTimeout(() => {
                syncDepartmentFilter();
                performSearch();
            }, 300);
        });
    }
    
    if (departmentFullNameSearchInput) {
        departmentFullNameSearchInput.addEventListener('input', function() {
            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(() => {
                syncDepartmentByFullName();
                performSearch();
            }, 300);
        });
    }
    
    if (departmentShortNameSearchInput) {
        departmentShortNameSearchInput.addEventListener('input', function() {
            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(() => {
                syncDepartmentByShortName();
                performSearch();
            }, 300);
        });
    }
    
    function syncDepartmentByFullName() {
        const departmentFullNameSearch = departmentFullNameSearchInput ? departmentFullNameSearchInput.value.trim() : '';
        if (departmentFullNameSearch) {
            const matchingDepartments = Array.from(departmentsSelect.options).filter(option => 
                option.value && option.getAttribute('data-fullname') && 
                option.getAttribute('data-fullname').toLowerCase().includes(departmentFullNameSearch.toLowerCase())
            );
            
            Array.from(departmentsSelect.selectedOptions).forEach(option => {
                option.selected = false;
            });
            
            matchingDepartments.forEach(option => {
                option.selected = true;
            });
            
            updateEmployeesList();
            updatePositionsList();
        } else {
            Array.from(departmentsSelect.selectedOptions).forEach(option => {
                option.selected = false;
            });
            updateEmployeesList();
            updatePositionsList();
        }
    }
    
    function syncDepartmentByShortName() {
        const departmentShortNameSearch = departmentShortNameSearchInput ? departmentShortNameSearchInput.value.trim() : '';
        if (departmentShortNameSearch) {
            const matchingDepartments = Array.from(departmentsSelect.options).filter(option => 
                option.value && option.getAttribute('data-shortname') && 
                option.getAttribute('data-shortname').toLowerCase().includes(departmentShortNameSearch.toLowerCase())
            );
            
            Array.from(departmentsSelect.selectedOptions).forEach(option => {
                option.selected = false;
            });
            
            matchingDepartments.forEach(option => {
                option.selected = true;
            });
            
            updateEmployeesList();
            updatePositionsList();
        } else {
            Array.from(departmentsSelect.selectedOptions).forEach(option => {
                option.selected = false;
            });
            updateEmployeesList();
            updatePositionsList();
        }
    }
    
    function syncDepartmentFilter() {
        const departmentSearch = departmentSearchInput ? departmentSearchInput.value.trim() : '';
        if (departmentSearch) {
            const matchingDepartments = Array.from(departmentsSelect.options).filter(option => 
                option.value && option.text.toLowerCase().includes(departmentSearch.toLowerCase())
            );
            
            Array.from(departmentsSelect.selectedOptions).forEach(option => {
                option.selected = false;
            });
            
            matchingDepartments.forEach(option => {
                option.selected = true;
            });
            
            updateEmployeesList();
            updatePositionsList();
        } else {
            Array.from(departmentsSelect.selectedOptions).forEach(option => {
                option.selected = false;
            });
            updateEmployeesList();
            updatePositionsList();
        }
    }
    
    function updateEmployeeCounter() {
        const visibleRows = document.querySelectorAll('#employeesTable tbody tr:not([style*="display: none"])');
        const totalEmployees = visibleRows.length;
        
        const badgeElement = document.querySelector('.search-results-header .badge');
        if (badgeElement) {
            badgeElement.textContent = totalEmployees;
        }

        const headerElement = document.querySelector('.card-header h5');
        if (headerElement) {
            headerElement.textContent = `Список сотрудников (${totalEmployees})`;
        }
    }
    
    function handleResponsiveColumns() {
        const width = window.innerWidth;
        
        if (width <= 360) {
            document.querySelectorAll('.table th, .table td').forEach(cell => {
                cell.style.fontSize = '0.7em';
                cell.style.padding = '2px 1px';
            });
        } else if (width <= 480) {
            document.querySelectorAll('.table th, .table td').forEach(cell => {
                cell.style.fontSize = '0.75em';
                cell.style.padding = '3px 1px';
            });
        } else if (width <= 768) {
            document.querySelectorAll('.table th, .table td').forEach(cell => {
                cell.style.fontSize = '0.8em';
                cell.style.padding = '4px 2px';
            });
        } else {
            document.querySelectorAll('.table th, .table td').forEach(cell => {
                cell.style.fontSize = '';
                cell.style.padding = '';
            });
        }
    }
    
    handleResponsiveColumns();
    window.addEventListener('resize', handleResponsiveColumns);
    function updateEmployeeCount() {
        const visibleRows = Array.from(tbody.querySelectorAll('tr')).filter(row => {
            const isDepartmentHeader = row.querySelector('.department-name-badge');
            const isServiceRow = row.classList.contains('text-center');
            const isHidden = row.style.display === 'none';
            
            return !isDepartmentHeader && !isServiceRow && !isHidden;
        });
        const count = visibleRows.length;
        const countElement = document.querySelector('.card-header h5');
        if (countElement) {
            countElement.textContent = `Список сотрудников (${count})`;
        }
    }

    function resetFilters() {
        searchInput.value = '';
        phoneSearchInput.value = '';
        departmentSearchInput.value = '';
        positionSearchInput.value = '';
        emailSearchInput.value = '';
        if (departmentFullNameSearchInput) departmentFullNameSearchInput.value = '';
        if (departmentShortNameSearchInput) departmentShortNameSearchInput.value = '';
        
        Array.from(employeesSelect.options).forEach(option => option.selected = false);
        Array.from(departmentsSelect.options).forEach(option => option.selected = false);
        Array.from(positionsSelect.options).forEach(option => option.selected = false);
        
        updateEmployeesList();
        updatePositionsList();
        
        performSearch();
    }
    
    const resetFiltersBtn = document.getElementById('resetFiltersBtn');
    if (resetFiltersBtn) {
        resetFiltersBtn.addEventListener('click', resetFilters);
    }
    
    const urlParams = new URLSearchParams(window.location.search);
    const departmentsPerPageFromUrl = urlParams.get('departmentsPerPage');
    if (departmentsPerPageFromUrl) {
        departmentsPerPageSelect.value = departmentsPerPageFromUrl;
    }
    
    const paginationNav = document.getElementById('paginationNav');
    if (paginationNav) {
        const currentDepartmentsPerPage = departmentsPerPageSelect.value;
        if (currentDepartmentsPerPage === '0') {
            paginationNav.style.display = 'none';
        } else {
            paginationNav.style.display = paginationNav.children.length > 0 ? 'block' : 'none';
        }
    }
});

</script>

